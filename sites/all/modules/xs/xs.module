<?php
/**
 * @file
 * Code for the XenServer API feature.
 */

include_once 'xs.features.inc';

define('XS_POWERSTATE_VM_DOWN', 'Down');
define('XS_API_ERROR', 'API Error. Unable to get the status.');
define('XS_API_VPS_CONTENT_TYPE', 'xs_vps');

/**
 * Implements hook_permission().
 */
function xs_permission() {
  return array(
    'administer xenserver pool' => array(
      'title' => t('Administer Xenserver Pool'),
    ),
  );
}

/**
 * Implements hook_menu().
 */
function xs_menu() {
  $items['admin/config/services/xs'] = array(
    'title' => 'Overview',
    'description' => 'Xenserver pool configurationand settings.',
    'page callback' => 'xs_settings',
    'access arguments' => array('administer xenserver pool'),
    'file' => 'includes/xs.pages.inc',
  );

  $items['admin/config/services/xs/default'] = array(
    'title' => 'Overview',
    'description' => 'Xenserver pool configurationand settings.',
    'type' => MENU_DEFAULT_LOCAL_TASK,
  );

  $items['admin/config/services/xs/settings'] = array(
    'title' => 'Xenserver Pools',
    'description' => 'Xenserver Pools settings.',
    'page callback' => 'xs_admin_pool_configuration',
    'access arguments' => array('administer xenserver pool'),
    'file' => 'includes/xs.pages.inc',
    'type' => MENU_LOCAL_TASK,
  );

  $items['admin/config/services/xs/vms'] = array(
    'title' => 'VMs',
    'description' => 'VMs available',
    'page callback' => 'xs_admin_pool_vms',
    'access arguments' => array('administer xenserver pool'),
    'file' => 'includes/xs.pages.inc',
    'weight' => 50,
    'type' => MENU_LOCAL_TASK,
  );

  $items['admin/config/services/xs/templates'] = array(
    'title' => 'Templates',
    'description' => 'Templates available',
    'page callback' => 'xs_admin_pool_templates',
    'access arguments' => array('administer xenserver pool'),
    'file' => 'includes/xs.pages.inc',
    'weight' => 50,
    'type' => MENU_LOCAL_TASK,
  );

  return $items;
}

/**
 * Implements hook_node_load().
 */
function xs_node_load($nodes, $types) {
  foreach ($nodes as $node) {
    if ($node->type == XS_API_VPS_CONTENT_TYPE) {
      if (!empty($node->field_xs_vps_owner)) {

      }
    }
  }
}

/**
 * Logs errors into watchdog.
 *
 * @param Exception $e
 *   An exception caught.
 */
function xs_log($e) {
  if ($e instanceof Exception) {
    watchdog('XS', 'Error when attempting to get host_get_by_uuid, error: !error, file: !file, line: !line', array(
      '!error' => $e->getMessage(),
      '!file' => $e->getFile(),
      '!line' => $e->getLine(),
    ), WATCHDOG_ERROR);
  }
  else {
    watchdog('XS', 'Error when attempting to get host_get_by_uuid, error: !error', array(
      '!error' => var_export($e, TRUE),
    ), WATCHDOG_ERROR);
  }
}

/**
 * Implements hook_theme().
 */
function xs_theme($existing, $type, $theme, $path) {
  $theme = array();
  $theme['node__xs_vps'] = array(
    'render element' => 'content',
    'base hook' => 'node',
    'template' => 'node--xs_vps',
    'path' => drupal_get_path('module', 'xs') . '/templates',
  );

  return $theme;
}

/**
 * Implements hook_preprocess_HOOK().
 */
function xs_preprocess_node(&$variables) {
  if ($variables['node']->type == 'xs_vps') {
    global $xs_api;

    $xs_api = xs_get_xs_api();

    $vm = xs_get_vm_by_uuid($variables['node']);

    $variables['vm_name'] = !empty($vm['name_label']) ?: XS_API_ERROR;
    $variables['vm_description'] = !empty($vm['name_description']) ?: XS_API_ERROR;
    $variables['vm_last_shutdown_time'] = !empty($vm['other_config']['last_shutdown_time']) ? date("d/m/Y h:iA", strtotime($vm['other_config']['last_shutdown_time'])) : XS_API_ERROR;
    $variables['vm_nics'] = !empty($vm['VIFs']) ? count($vm['VIFs']) : XS_API_ERROR;

    $vifs = xs_get_vifs($vm);
    if (!empty($vm)) {
      foreach ($vifs as $key => $vif) {
        $variables['vm_vifs'][$key]['device'] = $vif['device'];
        $variables['vm_vifs'][$key]['mac'] = $vif['MAC'];
      }
    }

    $variables['vm_power_state'] = !empty($vm['power_state']) ? $vm['power_state'] : XS_API_ERROR;
  }

  $vm_metrics = xs_api_get_vm_metrics($vm);
  $variables['vm_cpu'] = $vm_metrics['VCPUs_number'];
  $variables['vm_memory'] = $vm_metrics['memory_actual'] / 1024 / 1024 / 1024;

  $variables['start_time'] = date("d/m/Y h:iA", $vm_metrics['start_time']->timestamp);

  // Guest metrics.
  $vm_guest_metrix = xs_api_get_vm_guest_metrix($vm);

}

function xs_get_vm_by_uuid($node) {
  if (empty($node->field_xs_vps_uuid[LANGUAGE_NONE][0]['value'])) {
    drupal_set_message(t('No pool or VPS uuid provided for the !vps. Exiting.', array('!vps' => $node->title)));

    return FALSE;
  }

  return xs_api_get_vm_by_uuid($node->field_xs_vps_uuid[LANGUAGE_NONE][0]['value']);
}

/**
 * Gets VIFs of a $vm via XAPI.
 *
 * @param array $vm
 *   XAPI VM object.
 *
 * @return array
 *   Array of XAPI VIFs arrays.
 */
function xs_get_vifs($vm) {
  $vifs = array();
  if (!empty($vm['VIFs'])) {
    foreach ($vm['VIFs'] as $vif_ref) {
      $vifs[] = xs_api_get_vif($vif_ref);
    }
  }

  return $vifs;
}

