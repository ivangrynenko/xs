<?php
/**
 * @file
 * xs.module
 */

/**
 * Implements hook_permission().
 */
function xs_permission() {
  return array(
    'administer xenserver pool' => array(
      'title' => t('Administer Xenserver Pool'),
    ),
  );
}

/**
 * Implements hook_menu().
 */
function xs_menu() {
  $items['admin/config/services/xs'] = array(
    'title' => 'Overview',
    'description' => 'Xenserver pool configurationand settings.',
    'page callback' => 'xs_settings',
    'access arguments' => array('administer xenserver pool'),
    'file' => 'includes/xs.pages.inc',
  );

  $items['admin/config/services/xs/default'] = array(
    'title' => 'Overview',
    'description' => 'Xenserver pool configurationand settings.',
    'type' => MENU_DEFAULT_LOCAL_TASK,
  );

  $items['admin/config/services/xs/settings'] = array(
    'title' => 'Xenserver Pools',
    'description' => 'Xenserver Pools settings.',
    'page callback' => 'xs_admin_pool_configuration',
    'access arguments' => array('administer xenserver pool'),
    'file' => 'includes/xs.pages.inc',
    'type' => MENU_LOCAL_TASK,
  );

  $items['admin/config/services/xs/vms'] = array(
    'title' => 'VMs',
    'description' => 'VMs available',
    'page callback' => 'xs_admin_pool_vms',
    'access arguments' => array('administer xenserver pool'),
    'file' => 'includes/xs.pages.inc',
    'weight' => 50,
    'type' => MENU_LOCAL_TASK,
  );

  $items['admin/config/services/xs/templates'] = array(
    'title' => 'Templates',
    'description' => 'Templates available',
    'page callback' => 'xs_admin_pool_templates',
    'access arguments' => array('administer xenserver pool'),
    'file' => 'includes/xs.pages.inc',
    'weight' => 50,
    'type' => MENU_LOCAL_TASK,
  );

  return $items;
}

/**
 * Implements hook_theme().
 */
function xs_theme($existing, $type, $theme, $path) {
  $theme = array();
  $theme['node__xs_vps'] = array(
    'render element' => 'content',
    'base hook' => 'node',
    'template' => 'node--xs_vps',
    'path' => drupal_get_path('module', 'xs') . '/templates',
  );

  return $theme;
}

/**
 * Implements hook_preprocess_HOOK().
 */
function xs_preprocess_node(&$variables) {
  if ($variables['node']->type == 'xs_vps') {
    global $xs_api;

    $xs_api = xs_get_xs_api();

    $vm = xs_get_vm_by_uuid($variables['node']);

    $variables['vm_name'] = $vm['name_label'];
    $variables['vm_description'] = $vm['name_description'];
    $variables['vm_last_shutdown_time'] = date("d/m/Y h:iA", strtotime($vm['other_config']['last_shutdown_time']));
    $variables['vm_nics'] = count($vm['VIFs']);

    $vifs = xs_get_vifs($vm);
    foreach ($vifs as $key => $vif) {
      $variables['vm_vifs'][$key]['device'] = $vif['device'];
      $variables['vm_vifs'][$key]['mac'] = $vif['MAC'];
    }
    $variables['vm_power_state'] = $vm['power_state'];
  }

  $vm_metrics = xs_get_vm_metrics($vm['metrics']);
  $variables['vm_cpu'] = $vm_metrics['VCPUs_number'];
  $variables['vm_memory'] = $vm_metrics['memory_actual'] / 1024 / 1024 / 1024;

  $variables['start_time'] = date("d/m/Y h:iA", $vm_metrics['start_time']->timestamp);

  // Guest metrics.
  $vm_guest_metrix = xs_api_get_vm_guest_metrix($vm);

}

function xs_get_vifs($vm) {
  $vifs = array();
  if (!empty($vm['VIFs'])) {
    foreach ($vm['VIFs'] as $vif_ref) {
      $vifs[] = xs_api_get_vif($vif_ref);
    }
  }

  return $vifs;
}

function xs_get_vm_metrics($uuid) {
  global $xs_api;

  return $xs_api->VM_metrics_get_record($uuid);
}
