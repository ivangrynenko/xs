<?php
/**
 * @file
 * Code for the XenServer API feature.
 */

include_once 'xs.features.inc';

define('XS_POWERSTATE_VM_DOWN', 'Down');
define('XS_API_ERROR', 'API Error. Unable to get the status.');
define('XS_API_VPS_CONTENT_TYPE', 'xs_vps');

// Define xs actions.
define('XS_API_ACTION_NOACTION', 'noaction');
define('XS_API_ACTION_START', 'start');
define('XS_API_ACTION_REBOOT', 'clean_reboot');
define('XS_API_ACTION_POWEROFF', 'clean_shutdown');
define('XS_API_ACTION_REBOOT_FORCE', 'hard_reboot');
define('XS_API_ACTION_POWEROFF_FORCE', 'hard_shutdown');

/**
 * Implements hook_permission().
 */
function xs_permission() {
  return array(
    'administer xenserver pool' => array(
      'title' => t('Administer Xenserver Pool'),
    ),
    'perform own vm actions' => array(
      'title' => t('Perform own VPS actions'),
      'description' => 'Use to poweroff, reboot, poweron a VPS',
    ),
    'perform any vm actions' => array(
      'title' => t('Perform Any VPS actions'),
      'description' => 'Use to poweroff, reboot, poweron a VPS',
    ),
  );
}

/**
 * Implements hook_menu().
 */
function xs_menu() {
  $items['admin/config/services/xs'] = array(
    'title' => 'Overview',
    'description' => 'Xenserver pool configurationand settings.',
    'page callback' => 'xs_settings',
    'access arguments' => array('administer xenserver pool'),
    'file' => 'includes/xs.pages.inc',
  );

  $items['admin/config/services/xs/default'] = array(
    'title' => 'Overview',
    'description' => 'Xenserver pool configurationand settings.',
    'type' => MENU_DEFAULT_LOCAL_TASK,
  );

  $items['admin/config/services/xs/settings'] = array(
    'title' => 'Xenserver Pools',
    'description' => 'Xenserver Pools settings.',
    'page callback' => 'xs_admin_pool_configuration',
    'access arguments' => array('administer xenserver pool'),
    'file' => 'includes/xs.pages.inc',
    'type' => MENU_LOCAL_TASK,
  );

  $items['admin/config/services/xs/vms'] = array(
    'title' => 'VMs',
    'description' => 'VMs available',
    'page callback' => 'xs_admin_pool_vms',
    'access arguments' => array('administer xenserver pool'),
    'file' => 'includes/xs.pages.inc',
    'weight' => 50,
    'type' => MENU_LOCAL_TASK,
  );

  $items['admin/config/services/xs/templates'] = array(
    'title' => 'Templates',
    'description' => 'Templates available',
    'page callback' => 'xs_admin_pool_templates',
    'access arguments' => array('administer xenserver pool'),
    'file' => 'includes/xs.pages.inc',
    'weight' => 50,
    'type' => MENU_LOCAL_TASK,
  );

  $items['node/%node/xs-action/%'] = array(
    'title' => 'Perform actions on virtual server',
    'description' => 'Use to reboot the VPS gracefully',
    'page callback' => 'xs_actions_action_callback',
    'page arguments' => array(1, 3),
    'access callback' => 'xs_actions_access_callback',
    'access arguments' => array(1),
    'file' => 'includes/xs.actions.inc',
    'weight' => 60,
    'type' => MENU_CALLBACK,
  );

  return $items;
}

/**
 * Implements hook_node_load().
 */
function xs_node_load($nodes, $types) {
  foreach ($nodes as $node) {
    if ($node->type == XS_API_VPS_CONTENT_TYPE) {
      module_load_include('inc', 'xs', 'includes/xs.actions');
      $access = xs_actions_access_callback($node);
      if (!$access) {
        drupal_not_found();
      }
    }
  }
}

/**
 * Logs errors into watchdog.
 *
 * @param Exception $e
 *   An exception caught.
 */
function xs_log($e) {
  if ($e instanceof Exception) {
    watchdog('XS', 'Error when attempting to get host_get_by_uuid, error: !error, file: !file, line: !line', array(
      '!error' => $e->getMessage(),
      '!file' => $e->getFile(),
      '!line' => $e->getLine(),
    ), WATCHDOG_ERROR);
  }
  else {
    watchdog('XS', 'Error when attempting to get host_get_by_uuid, error: !error', array(
      '!error' => var_export($e, TRUE),
    ), WATCHDOG_ERROR);
  }
}

/**
 * Implements hook_theme().
 */
function xs_theme($existing, $type, $theme, $path) {
  $theme = array();
  $theme['node__xs_vps'] = array(
    'render element' => 'content',
    'base hook' => 'node',
    'template' => 'node--xs_vps',
    'path' => drupal_get_path('module', 'xs') . '/templates',
  );

  return $theme;
}

/**
 * Implements hook_preprocess_HOOK().
 */
function xs_preprocess_node(&$variables) {
  if ($variables['node']->type == 'xs_vps') {
    drupal_page_is_cacheable(FALSE);
    // @todo: Add content_access API call to bypass the below if no acces
    // is given to the node.

    // Add message about upcoming work.
    drupal_set_message('We are currently working on snapshots, to give you ability to create and restore snapshots of your server via this interface', 'warning');

    drupal_add_css(drupal_get_path('module', 'xs') . '/assets/css/xs.node.css');
    drupal_add_js(drupal_get_path('module', 'xs') . '/assets/js/xs.js');

    // Add actions to the VM.
    module_load_include('inc', 'xs', 'includes/xs.actions');
    $variables['actions_form'] = drupal_get_form('xs_actions_action_form', $variables['node']->nid);

    global $xs_api;

    $xs_api = xs_get_xs_api();

    $vm = xs_get_vm_by_uuid($variables['node']);

    $variables['vm_name'] = !empty($vm['name_label']) ? $vm['name_label'] : XS_API_ERROR;
    $variables['vm_description'] = !empty($vm['name_description']) ? $vm['name_description'] : XS_API_ERROR;
    $variables['vm_last_shutdown_time'] = !empty($vm['other_config']['last_shutdown_time']) ? date("d/m/Y h:iA", strtotime($vm['other_config']['last_shutdown_time'])) : XS_API_ERROR;
    $variables['vm_nics'] = !empty($vm['VIFs']) ? count($vm['VIFs']) : XS_API_ERROR;

    $vifs = xs_get_vifs($vm);
    if (!empty($vm)) {
      foreach ($vifs as $key => $vif) {
        $variables['vm_vifs'][$key]['device'] = 'eth' . $vif['device'];
        $variables['vm_vifs'][$key]['mac'] = $vif['MAC'];
      }
    }

    $variables['vm_power_state'] = !empty($vm['power_state']) ? $vm['power_state'] : XS_API_ERROR;
    $variables['vm_power_state_class'] = !empty($vm['power_state']) ? strtolower($vm['power_state']) : 'error';
  }

  $vm_metrics = xs_api_get_vm_metrics($vm);
  $variables['vm_cpu'] = $vm_metrics['VCPUs_number'];
  $variables['vm_memory'] = $vm_metrics['memory_actual'] / 1024 / 1024 / 1024;

  $variables['start_time'] = date("d/m/Y h:iA", $vm_metrics['start_time']->timestamp);

  // Guest metrics.
  $vm_guest_metrix = xs_api_get_vm_guest_metrix($vm);

  // Operating System.
  $variables['os']['version'] = !empty($vm_guest_metrix['os_version']['name']) ? $vm_guest_metrix['os_version']['name'] : 'N/A';
  $variables['os']['kernel'] = !empty($vm_guest_metrix['os_version']['uname']) ? $vm_guest_metrix['os_version']['uname'] : 'N/A';
  $variables['os']['distro'] = !empty($vm_guest_metrix['os_version']['distro']) ? $vm_guest_metrix['os_version']['distro'] : 'N/A';
  $variables['os']['major'] = !empty($vm_guest_metrix['os_version']['major']) ? $vm_guest_metrix['os_version']['major'] : 'N/A';
  $variables['os']['minor'] = !empty($vm_guest_metrix['os_version']['minor']) ? $vm_guest_metrix['os_version']['minor'] : 'N/A';

  // Network/IP addresses.
  if (!empty($vm_guest_metrix['networks'])) {
    foreach ($vm_guest_metrix['networks'] as $interface => $ip_address) {
      $interface_id = preg_replace('/[^0-9]/', '', $interface);
      $variables['network']['ips'][$interface_id] = $ip_address;
    }
  }

  // Adding buttons to reboot VM.


}

/**
 * Get VM by UUID, stored against $node.
 *
 * @param object $node
 *   Drupal node.
 *
 * @return bool|mixed
 */
function xs_get_vm_by_uuid($node) {
  if (empty($node->field_xs_vps_uuid[LANGUAGE_NONE][0]['value'])) {
    drupal_set_message(t('No pool or VPS uuid provided for the !vps. Exiting.', array('!vps' => $node->title)));

    return FALSE;
  }

  return xs_api_get_vm_by_uuid($node->field_xs_vps_uuid[LANGUAGE_NONE][0]['value']);
}

/**
 * Get VM UUID from $node object.
 *
 * @param object $node
 *   Drupal node object.
 *
 * @return string|bool
 *   UUID of the VM or FALSE.
 */
function xs_get_vm_uuid_by_node($node) {
  if (!empty($node->field_xs_vps_uuid[LANGUAGE_NONE][0]['value'])) {
    return $node->field_xs_vps_uuid[LANGUAGE_NONE][0]['value'];
  }

  return FALSE;
}

/**
 * Gets VIFs of a $vm via XAPI.
 *
 * @param array $vm
 *   XAPI VM object.
 *
 * @return array
 *   Array of XAPI VIFs arrays.
 */
function xs_get_vifs($vm) {
  $vifs = array();
  if (!empty($vm['VIFs'])) {
    foreach ($vm['VIFs'] as $vif_ref) {
      $vifs[] = xs_api_get_vif($vif_ref);
    }
  }

  return $vifs;
}

/**
 * XS Actions form builder.
 */
function xs_actions_action_form($form, &$form_state, $nid) {
  if (!empty($nid)) {
    $node = node_load($nid);
  }

  $form['id'] = array(
    '#type' => 'hidden',
    '#value' => $nid,
  );

  $form['actions'] = array(
    '#type' => 'fieldset',
    '#title' => 'Cloud VPS Actions',
  );

  $form['actions']['action'] = array(
    '#type' => 'select',
    '#title' => t('Select Action'),
    '#options' => array(
      XS_API_ACTION_NOACTION => t('Select action'),
      XS_API_ACTION_START => t('Start VPS'),
      XS_API_ACTION_REBOOT => t('Reboot VPS'),
      XS_API_ACTION_POWEROFF => t('Shut Down VPS'),
      XS_API_ACTION_REBOOT_FORCE => t('Force Reboot VPS'),
      XS_API_ACTION_POWEROFF_FORCE => t('Force Shutdown VPS'),
    ),
    '#access' => xs_actions_access_callback($node),
  );

  $form['actions']['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Execute'),
  );

  $form['#validate'][] = 'xs_actions_action_form_validate';
  $form['#submit'][] = 'xs_actions_action_form_submit';

  return $form;
}

/**
 * Form validate handler for xs_actions_action_form.
 */
function xs_actions_action_form_validate($form, &$form_state) {
  // Extra access check.
  $nid = arg(1);
  $node = node_load($nid);
  $access = xs_actions_access_callback($node);

  if (!$access) {
    form_set_error('action', t('Action validation failed, please contact support and quote error number FS-61'));
  }
  // End extra access check.

  if ($form_state['values']['action'] == XS_API_ACTION_NOACTION) {
    form_set_error('action', t('Select valid action, then press Execute button'));
  }

  $form_state['storage']['xs_vm_node'] = $node;
}

/**
 * Form submit handler for xs_actions_action_form.
 */
function xs_actions_action_form_submit($form, &$form_state) {
  // Extra access check.
  if (empty($form_state['storage']['xs_vm_node'])) {
    drupal_set_message('Action validation failed, please contact support and quote error number FS-72', 'error');
    drupal_goto('node/' . arg(1));
  }

  $access = xs_actions_access_callback($form_state['storage']['xs_vm_node']);

  if (!$access) {
    drupal_set_message('Action validation failed, please contact support and quote error number FS-79', 'error');
    drupal_goto('node/' . arg(1));
  }
  // End extra access check.

  // Clear action string.
  $action = filter_xss($form_state['values']['action']);
  $action = check_plain($action);
  $action = trim($action);

  $form_state['redirect'] = url('node/' . $form_state['storage']['xs_vm_node']->nid . '/xs-action/' . $action);
}

/**
 * Access callback to perform VM actions.
 *
 * @param object $node
 *   VM Node object.
 *
 * @return bool
 *   TRUE for access or FALSE for no access.
 */
function xs_actions_access_callback($node) {
  global $user;
  if (empty($node)) {
    return FALSE;
  }

  if ($user->uid == 1 || user_access('perform any vm actions')) {
    return TRUE;
  }

  if (user_access('perform own vm actions') && !empty($node->field_xs_vps_owner[LANGUAGE_NONE][0]['target_id'])) {
    return $user->uid == $node->field_xs_vps_owner[LANGUAGE_NONE][0]['target_id'];
  }

  return FALSE;
}

/**
 * Callback for VM actions.
 *
 * @param object $node
 *   VM node.
 * @param string $action
 *   Action to be performed on the $node VM. Supported actions are:
 *   - reboot: graceful reboot of the VM,
 *   - poweroff: graceful poweroff of the VM,
 *   - start: start the VM,
 *   - reboot-force: forceful reboot of the VM,
 *   - poweroff-force: forceful poweroff of the VM.
 *
 * @return string
 */
function xs_actions_action_callback($node, $action) {
  global $xs_api;
  $xs_api = xs_get_xs_api();
  $vm = xs_get_vm_by_uuid($node);

  if (!in_array($action, $vm['allowed_operations'])) {
    drupal_set_message('This action is not allowed', 'error');
    drupal_goto('node/' . $node->nid);
  }

  switch ($action) {
    case XS_API_ACTION_START:
      xs_actions_action_vps_start($xs_api, $node);
      drupal_set_message('The server has been started. Allow 1-2 minutes before attempting to connect.');
      drupal_set_message('You may need to refresh this page in order to reflect server\'s power state or IP addresses.');
      break;

    case XS_API_ACTION_POWEROFF:
      xs_actions_action_vps_shutdown($xs_api, $node);
      drupal_set_message('The server is being shut down. Allow 1-2 minutes before it has shut down.');
      drupal_set_message('You may need to refresh this page in order to reflect server\'s power state');
      break;

    case XS_API_ACTION_REBOOT:
      xs_actions_action_vps_clean_reboot($xs_api, $node);
      drupal_set_message('The server is being rebooted. Allow 1-2 minutes for the operation to complete.');
      break;

    case XS_API_ACTION_REBOOT_FORCE:
      xs_actions_action_vps_hard_reboot($xs_api, $node);
      drupal_set_message('The server has been forcefully rebooted. Allow 1-2 minutes for the operation to complete.');
      break;

    case XS_API_ACTION_POWEROFF_FORCE:
      xs_actions_action_vps_hard_shutdown($xs_api, $node);
      drupal_set_message('The server has been forcefully shut down. Allow 1-2 minutes for the operation to complete.');
      break;

    default:
      drupal_set_message('This action is not recognised', 'error');
      break;
  }
  drupal_goto('node/' . $node->nid);
}

/**
 * Start a VPS action.
 *
 * @param XenApi $xs_api
 *   Xenserver API.
 * @param object $node
 *   Drupal node object of VM type.
 */
function xs_actions_action_vps_start($xs_api, $node) {
  $uuid = xs_get_vm_uuid_by_node($node);
  $vm_ref = $xs_api->VM_get_by_uuid($uuid);
  $xs_api->VM_start($vm_ref, FALSE, FALSE);
}

/**
 * Shutdown/halt a VPS action.
 *
 * @param XenApi $xs_api
 *   Xenserver API.
 * @param object $node
 *   Drupal node object of VM type.
 */
function xs_actions_action_vps_shutdown($xs_api, $node) {
  $uuid = xs_get_vm_uuid_by_node($node);
  $vm_ref = $xs_api->VM_get_by_uuid($uuid);
  $xs_api->VM_clean_shutdown($vm_ref);
}

/**
 * Clean reboot a VPS action.
 *
 * @param XenApi $xs_api
 *   Xenserver API.
 * @param object $node
 *   Drupal node object of VM type.
 */
function xs_actions_action_vps_clean_reboot($xs_api, $node) {
  $uuid = xs_get_vm_uuid_by_node($node);
  $vm_ref = $xs_api->VM_get_by_uuid($uuid);
  $xs_api->VM_clean_reboot($vm_ref);
}

/**
 * Hard reboot a VPS action.
 *
 * @param XenApi $xs_api
 *   Xenserver API.
 * @param object $node
 *   Drupal node object of VM type.
 */
function xs_actions_action_vps_hard_reboot($xs_api, $node) {
  $uuid = xs_get_vm_uuid_by_node($node);
  $vm_ref = $xs_api->VM_get_by_uuid($uuid);
  $xs_api->VM_hard_reboot($vm_ref);
}


/**
 * Hard shutdown a VPS action.
 *
 * @param XenApi $xs_api
 *   Xenserver API.
 * @param object $node
 *   Drupal node object of VM type.
 */
function xs_actions_action_vps_hard_shutdown($xs_api, $node) {
  $uuid = xs_get_vm_uuid_by_node($node);
  $vm_ref = $xs_api->VM_get_by_uuid($uuid);
  $xs_api->VM_hard_shutdown($vm_ref);
}

