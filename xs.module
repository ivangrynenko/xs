<?php
/**
 * @file
 * Code for the XenServer API feature.
 */

include_once 'xs.features.inc';

define('XS_DATE_FORMAT', 'd M Y h:i:sA');
define('XS_POWERSTATE_VM_DOWN', 'Down');
define('XS_API_ERROR', 'API Error. Unable to get the status.');
define('XS_API_VPS_CONTENT_TYPE', 'xs_vps');
define('XS_API_USER_ROLE', 'XS VPS Customer');

// Define xs actions.
define('XS_API_ACTION_NOACTION', 'noaction');
define('XS_API_ACTION_START', 'start');
define('XS_API_ACTION_REBOOT', 'clean_reboot');
define('XS_API_ACTION_POWEROFF', 'clean_shutdown');
define('XS_API_ACTION_REBOOT_FORCE', 'hard_reboot');
define('XS_API_ACTION_POWEROFF_FORCE', 'hard_shutdown');

// Define snapshot related constants.
define('XS_API_SNAPSHOT_CREATE_BUTTON_TITLE', 'Create');

// Other constants definitions.
define('XS_API_EMPTY_REF', 'OpaqueRef:NULL');

// Define hard shapshots number limit (due to xenserver issues with large
// snapshot chains.
define('XS_API_SNAPSHOTS_MAX', 25);

/**
 * Implements hook_init().
 */
function xs_init() {
  global $user, $theme, $theme_key;

  $allowed_themes = array(
    'bootstrap',
  );
  if (in_array($GLOBALS['theme_key'], $allowed_themes)) {
    drupal_add_css(drupal_get_path('module', 'xs') . '/assets/css/xs.node.css');
    drupal_add_js(drupal_get_path('module', 'xs') . '/assets/js/xs.js');
  }

  $user_role = user_role_load_by_name(XS_API_USER_ROLE);

  if (in_array($user_role->name, $user->roles)) {
    if (arg(0) == 'user') {
      $theme = 'bootstrap';
      $theme_key = 'bootstrap';
      drupal_js_defaults(drupal_get_path('module', 'jquery_update') . '/replace/jquery/1.10/jquery.min.js');
    }
  }
}

/**
 * Implements hook_permission().
 */
function xs_permission() {
  return array(
    'administer xenserver pool' => array(
      'title' => t('Administer Xenserver Pool'),
      'description' => t('Administer xenserver pool'),
    ),
    'perform own vm actions' => array(
      'title' => t('Perform own VPS actions'),
      'description' => 'Use to poweroff, reboot, poweron a VPS',
    ),
    'perform any vm actions' => array(
      'title' => t('Perform Any VPS actions'),
      'description' => 'Use to poweroff, reboot, poweron a VPS',
    ),
    'view own xs action log' => array(
      'title' => t('View own server log entries Server Action log'),
      'description' => t('Allows users to View log entries in own Server Action log.'),
      'restrict access' => TRUE,
    ),
    'view any xs action log' => array(
      'title' => t('View any serverlog entries Server Action log'),
      'description' => t('Allows users to View log entries in any Server Action log.'),
      'restrict access' => TRUE,
    ),
  );
}

/**
 * Implements hook_menu().
 */
function xs_menu() {
  $items = array();

  $items['node/%node/xs-actions/%'] = array(
    'title' => t('Confirm action'),
    'description' => 'Use to reboot the VPS gracefully',
    'page callback' => 'drupal_get_form',
    'page arguments' => array(
      'xs_actions_server_action_confirmation_form',
      1,
      3
    ),
    'access callback' => 'xs_actions_access_callback',
    'access arguments' => array(1),
    'file' => 'includes/xs.actions.inc',
    'weight' => 60,
    'type' => MENU_CALLBACK,
  );

  $items['node/%node/xs-snapshots'] = array(
    'title' => t('Snaphots'),
    'description' => 'Allows browsing and actions with server snapshots',
    'page callback' => 'xs_actions_snapshots_callback',
    'page arguments' => array(1),
    'access callback' => 'xs_actions_access_callback',
    'access arguments' => array(1),
    'file' => 'includes/xs.snapshots.inc',
    'weight' => 60,
    'type' => MENU_LOCAL_TASK,
  );

  $items['user-vps'] = array(
    'title' => t('Servers'),
    'description' => 'Browse user VPS.',
    'page callback' => 'xs_user_vps_callback',
    'access arguments' => array('perform own vm actions'),
    'weight' => 60,
    'type' => MENU_NORMAL_ITEM,
    'menu_name' => 'user-menu',
  );

  $items['node/%node/xs-snapshots/%/%'] = array(
    'title' => t('Confirm Action'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('xs_actions_confirm_snapshots_form', 1, 3, 4),
    'access callback' => 'xs_actions_access_callback',
    'access arguments' => array(1),
    'file' => 'includes/xs.snapshots.inc',
    'weight' => 60,
    'type' => MENU_CALLBACK,
  );

  return $items;
}

/**
 * Callback for user-vms URL.
 *
 * @return string
 *   HTML.
 */
function xs_user_vps_callback() {
  global $user;

  return views_embed_view('xs_user_vms', 'block', $user->uid);
}

/**
 * Menu argument loader: loads VM or snapshot reference by uuid.
 *
 * @param $vm_uuid
 *   The UUID of a VPS or a Snapshot or a template.
 *
 * @return string
 *   XenApi reference string of the matching UUID.
 */
function xs_vm_uuid_load($vm_uuid) {
  try {
    $xs_vm = new XsVm($vm_uuid);
  }
  catch (Exception $e) {
    xs_log($e);
  }

  return $xs_vm->ref;
}

/**
 * Implements hook_node_load().
 */
function xs_node_load($nodes, $types) {
  foreach ($nodes as $node) {
    if ($node->type == XS_API_VPS_CONTENT_TYPE) {
      $access = xs_actions_access_callback($node);
      if (!$access) {
        drupal_not_found();
      }

      $xs = new stdClass();
      $node->xs = $xs;
      $vm_uuid = xs_get_vm_uuid_by_node($node);
      try {
        $xs_vm = new XsVm($vm_uuid);
      }
      catch (Exception $e) {
        xs_log($e);
      }

      if (!empty($xs_vm)) {
        $node->xs->vm = $xs_vm->getData();
      }
    }
  }
}

/**
 * Logs errors into watchdog.
 *
 * @param Exception $e
 *   An exception caught.
 */
function xs_log($e) {
  if ($e instanceof Exception) {
    watchdog('XS', 'Error when attempting to get host_get_by_uuid, error: !error, file: !file, line: !line', array(
      '!error' => $e->getMessage(),
      '!file' => $e->getFile(),
      '!line' => $e->getLine(),
    ), WATCHDOG_ERROR);
  }
  else {
    watchdog('XS', 'Error when attempting to get host_get_by_uuid, error: !error', array(
      '!error' => var_export($e, TRUE),
    ), WATCHDOG_ERROR);
  }
}

/**
 * Implements hook_theme().
 */
function xs_theme($existing, $type, $theme, $path) {
  return array(
    'node__xs_vps' => array(
      'render element' => 'content',
      'base hook' => 'node',
      'template' => 'node--xs_vps',
      'path' => drupal_get_path('module', 'xs') . '/templates',
    ),
    'xs_actions_snapshots_output' => array(
      'template' => 'templates/xs-actions-snapshots-output',
      'file' => 'theme/xs_theme.inc',
      'preprocess functions' => array('xs_preproces_xs_actions_snapshots_output'),
      'variables' => array(
        'node' => NULL,
      ),
    ),
    'xs_links_dropdown' => array(
      'file' => 'theme/xs_theme.inc',
      'function' => 'xs_links_dropdown_theme',
      'variables' => array('links' => NULL, 'label' => NULL, 'size' => NULL),
    ),
    'xs_snapshot_title_cell_theme' => array(
      'file' => 'theme/xs_theme.inc',
      'function' => 'xs_snapshot_title_cell_theme',
      'variables' => array('snapshot' => NULL),
    ),
    'xs_server_navigation' => array(
      'file' => 'theme/xs_theme.inc',
      'function' => 'xs_server_navigation_theme',
    ),
    'xs_user_navigation' => array(
      'file' => 'theme/xs_theme.inc',
      'function' => 'xs_user_navigation_theme',
    ),
    'xs_server_thumbs_navigation' => array(
      'file' => 'theme/xs_theme.inc',
      'template' => 'templates/xs-server-thumbs-navigation-block',
    ),
    'views_view_field__xs_user_vms__nid3' => array(
      'arguments' => array('view' => NULL, 'field' => NULL, 'row' => NULL),
      'template' => 'views-view-field--xs-user-vms--nid-3',
      'original hook' => 'views_view_field',
      'path' => drupal_get_path('module', 'xs') . '/themes',
    ),
  );
}

/**
 * Implements hook_preprocess_HOOK().
 */
function xs_preprocess_html(&$variables) {
  if (drupal_is_front_page()) {
    drupal_set_title();
  }
  drupal_add_css('https://maxcdn.bootstrapcdn.com/font-awesome/4.5.0/css/font-awesome.min.css', array('type' => 'external'));
}

/**
 * Implements hook_preprocess_HOOK().
 */
function xs_preprocess_node(&$variables) {
  if ($variables['node']->type == 'xs_vps') {
    drupal_page_is_cacheable(FALSE);

    drupal_set_title(t('Overview of !server', array('!server' => $variables['node']->title)));

    $variables['xs_action_log'] = views_embed_view('xs_action_log', 'page_user_actions', $variables['node']->nid);

    $vm_uuid = xs_get_vm_uuid_by_node($variables['node']);
    try {
      $xs_vm = new XsVm($vm_uuid);
    }
    catch (Exception $e) {
      xs_log($e);
    }

    if (!empty($xs_vm)) {
      $vm = $xs_vm->getData();
    }

    // If VM is not available, we were unable to connect to any of XS hosts.
    // Instead of displaying the confusing content, show the status message
    // and exit.
    $variables['error_message'] = '';
    if (empty($vm)) {
      $variables['error_message'] = t('API Error. Unable to connect to the server. If this error persists, please contact our support');

      return;
    }

    // VM metrics.
    $vm_metrics = $xs_vm->getMetrics();

    // Guest metrics.
    $vm_guest_metrix = $xs_vm->getGuestMetrics();

    // VBDs.
    $disk_size = $xs_vm->getDiskSpace($vm['VBDs']);
    $variables['disk_size'] = $disk_size / 1024 / 1024 / 1024;

    // Get individual disk device data.
    $variables['vbds'] = array();
    foreach ($vm['VBDs'] as $vbd_ref) {
      $vbd = $xs_vm->getVdiByVbd($vbd_ref);
      if (empty($vbd)) {
        continue;
      }
      $variables['vbds'][$vbd['uuid']]['virtual_size'] = $vbd['virtual_size'] / 1024 / 1024 / 1024;
      $variables['vbds'][$vbd['uuid']]['physical_utilisation'] = (float) number_format($vbd['physical_utilisation'] / 1024 / 1024 / 1024, 2);
      $variables['vbds'][$vbd['uuid']]['percent_physical_utilisation'] = (float) number_format($vbd['physical_utilisation'] / $vbd['virtual_size'] * 100, 1) . '%';
      $variables['vbds'][$vbd['uuid']]['name_label'] = $vbd['name_label'];
      $variables['vbds'][$vbd['uuid']]['type'] = $vbd['type'];
      $variables['vbds_size'][] = '<span class="label label-primary">' . $variables['vbds'][$vbd['uuid']]['virtual_size'] . '</span> GB';
    }

    $variables['vm_name'] = !empty($vm['name_label']) ? $vm['name_label'] : XS_API_ERROR;
    $variables['vm_description'] = !empty($vm['name_description']) ? $vm['name_description'] : XS_API_ERROR;
    $variables['vm_last_shutdown_time'] = !empty($vm['other_config']['last_shutdown_time']) ? date("d/m/Y h:iA", strtotime($vm['other_config']['last_shutdown_time'])) : XS_API_ERROR;
    $variables['vm_nics'] = !empty($vm['VIFs']) ? count($vm['VIFs']) : XS_API_ERROR;

    $variables['vm_power_state'] = !empty($vm['power_state']) ? $vm['power_state'] : XS_API_ERROR;
  }

  $variables['vm_cpu'] = $vm_metrics['VCPUs_number'];

  // Memory in GB.
  $memory = $vm_metrics['memory_actual'] / 1024 / 1024 / 1024;
  $memory = $memory > 1 ? (int) ceil($memory) : $memory;
  $variables['vm_memory'] = $memory;

  $vm_is_running = preg_match('/running/i', $vm['power_state']);

  $variables['start_time'] = $vm_is_running ? date("d M Y h:iA", $vm_metrics['start_time']->timestamp) : 'Halted';
  $time_delta = REQUEST_TIME - $vm_metrics['start_time']->timestamp;
  $server_running_time = xs_seconds2human($time_delta);
  $variables['server_uptime'] = $vm_is_running ? $server_running_time['days'] . ' days, ' . $server_running_time['hours'] . ' hours, ' . $server_running_time['minutes'] . ' minutes' : 'Halted';

  // Operating System.
  $variables['os']['version'] = !empty($vm_guest_metrix['os_version']['name']) ? $vm_guest_metrix['os_version']['name'] : 'N/A';
  $variables['os']['kernel'] = !empty($vm_guest_metrix['os_version']['uname']) ? $vm_guest_metrix['os_version']['uname'] : 'N/A';

  $variables['virtualization_state'] = !empty($vm_guest_metrix['PV_drivers_version']['minor']) ? $vm_guest_metrix['PV_drivers_version']['major'] . '.' . $vm_guest_metrix['PV_drivers_version']['minor'] : 'N/A';
  $variables['virtualization_uptodate'] = empty($vm_guest_metrix['PV_drivers_up_to_date']) ? '<span class="red">' . t('Tools out of date') . '</span>' : '<span class="green">' . t('Tools up to date') . '</span>';

  // Network/IP addresses.
  if (!empty($vm_guest_metrix['networks'])) {
    foreach ($vm_guest_metrix['networks'] as $interface => $ip_address) {
      $interface_id = preg_replace('/[^0-9]/', '', $interface);
      $variables['network']['ips'][$interface_id] = $ip_address ? $ip_address : 'Unconfigured';
    }
  }
}

/**
 * Converts seconds into uptime-readable numbers.
 *
 * @param $seconds
 *
 * @return mixed
 */
function xs_seconds2human($seconds) {
  $return['seconds'] = $seconds % 60;
  $return['minutes'] = floor(($seconds % 3600) / 60);
  $return['hours'] = floor(($seconds % 86400) / 3600);
  $return['days'] = floor(($seconds % 2592000) / 86400);
  $return['months'] = floor($seconds / 2592000);

  return $return;
}

/**
 * Get VM UUID from $node object.
 *
 * @param object $node
 *   Drupal node object.
 *
 * @return string|bool
 *   UUID of the VM or FALSE.
 */
function xs_get_vm_uuid_by_node($node) {
  if (is_numeric($node)) {
    $node = node_load($node);
  }

  if (!empty($node->field_xs_vps_uuid[LANGUAGE_NONE][0]['value'])) {
    return $node->field_xs_vps_uuid[LANGUAGE_NONE][0]['value'];
  }

  return FALSE;
}

/**
 * XS Actions form builder.
 *
 * @todo: REMOVE.
 */
function xs_actions_action_form($form, &$form_state, $nid, $allowed_operations) {
  if (!empty($nid)) {
    $node = node_load($nid);
  }

  $form['id'] = array(
    '#type' => 'hidden',
    '#value' => $nid,
  );

  $form['action'] = array(
    '#type' => 'select',
    '#options' => array(
      XS_API_ACTION_NOACTION => t('Select action'),
      XS_API_ACTION_START => t('Start VPS'),
      XS_API_ACTION_REBOOT => t('Reboot VPS'),
      XS_API_ACTION_POWEROFF => t('Shut Down VPS'),
      XS_API_ACTION_REBOOT_FORCE => t('Force Reboot VPS'),
      XS_API_ACTION_POWEROFF_FORCE => t('Force Shutdown VPS'),
    ),
    '#default_value' => XS_API_ACTION_NOACTION,
    '#access' => xs_actions_access_callback($node),
  );

  // Filter out VM operations that are not allowed. For example, remove 'start'
  // operation for a VM that is in Running state.
  foreach ($form['action']['#options'] as $key => $option) {
    if (!in_array($key, $allowed_operations)) {
      unset($form['action']['#options'][$key]);
    }
  }

  array_unshift($form['action']['#options'], t('Select action'));

  $form['help'] = array(
    '#markup' => t('WARNING! NO CONFIRMATION!'),
    '#prefix' => '<div class="label label-danger">',
    '#suffix' => '</div>',
  );

  $form['help-more'] = array(
    '#markup' => t('THE SELECTED ACTION WILL BE EXECUTED IMMEDIATELY UPON SUBMITTING THIS FORM!'),
    '#prefix' => '<div class="description">',
    '#suffix' => '</div>',
  );

  $form['help-even-more'] = array(
    '#markup' => t('Only actions available for current power state of the server are listed.'),
    '#prefix' => '<div class="description">',
    '#suffix' => '</div>',
  );

  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Execute'),
    '#attributes' => array(
      'class' => array('btn btn-default'),
      'type' => 'button',
    ),
  );

  $form['#validate'][] = 'xs_actions_action_form_validate';
  $form['#submit'][] = 'xs_actions_action_form_submit';

  return $form;
}

/**
 * Form validate handler for xs_actions_action_form.
 *
 * @todo: REMOVE.
 */
function xs_actions_action_form_validate($form, &$form_state) {
  // Extra access check.
  $nid = arg(1);
  $node = node_load($nid);
  $access = xs_actions_access_callback($node);

  if (!$access) {
    form_set_error('action', t('Action validation failed, please contact support and quote error number FS-61'));
  }
  // End extra access check.

  if ($form_state['values']['action'] == '0') {
    return form_set_error('action', t('Select valid action, then press Execute button'));
  }

  $form_state['storage']['xs_vm_node'] = $node;
}

/**
 * Form submit handler for xs_actions_action_form.
 *
 * @todo: REMOVE.
 */
function xs_actions_action_form_submit($form, &$form_state) {
  // Extra access check.
  if (empty($form_state['storage']['xs_vm_node'])) {
    drupal_set_message('Action validation failed, please contact support and quote error number FS-72', 'error');
    drupal_goto('node/' . arg(1));
  }

  $access = xs_actions_access_callback($form_state['storage']['xs_vm_node']);

  if (!$access) {
    drupal_set_message('Action validation failed, please contact support and quote error number FS-79', 'error');
    drupal_goto('node/' . arg(1));
  }
  // End extra access check.

  module_load_include('inc', 'xs', 'includes/xs.actions');

  // Clear action string.
  $action = filter_xss($form_state['values']['action']);
  $action = check_plain($action);
  $action = trim($action);

  $form_state['redirect'] = url('node/' . $form_state['storage']['xs_vm_node']->nid . '/xs-action/' . $action);

  xs_actions_action($form_state['storage']['xs_vm_node'], $action);
}

/**
 * Access callback to perform VM actions.
 *
 * @param object $node
 *   VM Node object.
 *
 * @return bool
 *   TRUE for access or FALSE for no access.
 */
function xs_actions_access_callback($node) {
  global $user;

  if (empty($node) || $node->type != XS_API_VPS_CONTENT_TYPE) {
    return FALSE;
  }

  if ($user->uid == 1 || user_access('perform any vm actions')) {
    return TRUE;
  }

  if (user_access('perform own vm actions')) {
    return $user->uid == $node->uid;
  }

  return FALSE;
}

/**
 * Implements hook_node_presave().
 *
 * @param object $node
 *   Drupal node object.
 */
function xs_node_presave($node) {
  $owner_uid = xs_get_vps_owner_uid($node);
  if ($node->type == 'xs_vps' && !empty($owner_uid)) {
    // If teh VPS Owner field is set to specific system user, update the node
    // owner to that user, so that Content Access kicks in.
    $node->uid = $owner_uid;
  }
}

/**
 * Retrieves VPS node owner from a designated field.
 *
 * @param object $node
 *   Drupal node object
 *
 * @return bool|int
 *   Owner uid or FALSE.
 */
function xs_get_vps_owner_uid($node) {
  if (is_numeric($node)) {
    $node = node_load($node);
  }

  try {
    $node_wrapper = entity_metadata_wrapper('node', $node);
    $uid = $node_wrapper->field_xs_vps_owner->value()->uid;
  }
  catch (Exception $e) {
    watchdog('XS', 'Unable to load server node !title. The error was: !message', array(
      '!title' => $node->title,
      '!message' => $e->getMessage(),
    ), WATCHDOG_ERROR);
  }

  return !empty($uid) ? $uid : FALSE;
}

/**
 * Implements hook_entity_info().
 */
function xs_entity_info() {
  $return['xs_action_log'] = array(
    'label' => t('Server Action Log'),
    'entity class' => 'XsActionLog',
    'controller class' => 'XsActionLogController',
    'base table' => 'xs_action_log',
    'fieldable' => FALSE,
    'exportable' => FALSE,
    'entity keys' => array(
      'id' => 'id',
    ),
    'module' => 'xs',
    'access callback' => 'xs_access',
  );

  return $return;
}

/**
 * Access callback for xs_action_log entity.
 */
function xs_access($op, $xs_action_log, $account = NULL, $entity_type = NULL) {
  switch ($op) {
    case 'view':
      if (user_access('view any xs action log')) {
        return TRUE;
      }
      elseif (user_access('view own xs action log')) {
        return $xs_action_log->uid == $account->uid;
      }
      break;
  }

  return FALSE;
}

/**
 * Writes action log entry.
 *
 * @param string $message
 *   Message to write.
 * @param string $type
 *   Machine name of the message in a freeform way, max 32 characters.
 */
function xs_action_log_write($message, $type) {
  $log = entity_create('xs_action_log', array(
    'log' => $message,
    'type' => $type
  ));
  $log->save();
}

/**
 * Gets the number of CPUs for VM.
 *
 * @param object $node
 *   Drupal VM node object.
 *
 * @return int
 *   The number of CPUs.
 */
function xs_get_vm_cpus_by_node($node) {
  $vm_uuid = xs_get_vm_uuid_by_node($node);
  try {
    $xs_vm = new XsVm($vm_uuid);
  }
  catch (Exception $e) {
    xs_log($e);
  }

  if (!empty($xs_vm)) {
    $vm = $xs_vm->getData();
  }

  return $vm['VCPUs_max'];
}

/**
 * Gets the number of VIFs for VM.
 *
 * @param object $node
 *   Drupal VM node object.
 *
 * @return int
 *   The number of CPUs.
 */
function xs_get_vm_networks_by_node($node) {
  $vm_uuid = xs_get_vm_uuid_by_node($node);
  try {
    $xs_vm = new XsVm($vm_uuid);
  }
  catch (Exception $e) {
    xs_log($e);
  }

  return !empty($xs_vm) ? $xs_vm->getVifs() : array();
}

/**
 * Gets the number of disks for VM.
 *
 * @param object $node
 *   Drupal VM node object.
 *
 * @return int
 *   The number of CPUs.
 */
function xs_get_vm_disks_by_node($node) {
  $vm_uuid = xs_get_vm_uuid_by_node($node);
  try {
    $xs_vm = new XsVm($vm_uuid);
  }
  catch (Exception $e) {
    xs_log($e);
  }

  return !empty($xs_vm) ? $xs_vm->getVbds() : array();
}

/**
 * Implements hook_cron().
 */
function xs_cron() {
  xs_cron_procedures();
}

/**
 * Runs required procedures during cron run.
 */
function xs_cron_procedures() {
  // Clean up action log.
  $server_nids = xs_get_all_active_server_nids();
  foreach ($server_nids as $nid) {
    xs_clear_log($nid);
  }
}

/**
 * Deletes log rows.
 *
 * @param int $server_node_nid
 *   Server node nid.
 */
function xs_clear_log($server_node_nid) {
  $query = db_select('xs_action_log', 'l');
  $query->fields('l', array('id'));
  $query->condition('target_id', $server_node_nid, '=');
  $query->range(1000, 1000000000);
  $query->orderBy('created', 'DESC');
  $result = $query->execute();

  $delete_ids = array();
  while ($row = $result->fetchAssoc()) {
    $delete_ids[] = $row['id'];
  }

  if (!empty($delete_ids)) {
    entity_delete_multiple('xs_action_log', $delete_ids);
    watchdog('XS', 'Removing !num excessive rows from xs_action_log', array('!num' => count($delete_ids)), WATCHDOG_INFO);
  }
}

/**
 * Gets nids for all active nodes of XS_API_VPS_CONTENT_TYPE.
 *
 * @return array
 *   Nids.
 */
function xs_get_all_active_server_nids() {
  $query = db_select('node', 'n');
  $query->fields('n', array('nid'))
    ->condition('status', '1', '=')
    ->condition('type', XS_API_VPS_CONTENT_TYPE, '=');

  $result = $query->execute();
  $server_nids = array();
  while ($row = $result->fetchAssoc()) {
    $server_nids[] = $row['nid'];
  }

  return $server_nids;
}

/**
 * Gets power state of VM identified by node.
 *
 * @param object $node
 *   Drupal node object.
 *
 * @return string
 *   Power state.
 */
function xs_get_vm_power_status($node) {
  $vm_uuid = xs_get_vm_uuid_by_node($node);
  try {
    $xs_vm = new XsVm($vm_uuid);
  }
  catch (Exception $e) {
    xs_log($e);
  }

  if (!empty($xs_vm)) {
    $vm = $xs_vm->getData();
  }

  return !empty($vm) ? $vm['power_state'] : 'Unkown';
}

/**
 * Implements hook_block_info().
 */
function xs_block_info() {
  $block['xs-server-navigation'] = array(
    'info' => t('XS: Server Navigation'),
    'cache' => DRUPAL_CACHE_PER_PAGE,
  );

  $block['xs-server-thumbs-navigation'] = array(
    'info' => t('XS: Server Thumbnail Navigation'),
    'cache' => DRUPAL_CACHE_PER_PAGE,
  );

  $block['xs-server-action-links'] = array(
    'info' => t('XS: Server Action Links'),
    'cache' => DRUPAL_CACHE_PER_PAGE,
  );

  $block['xs-user-links'] = array(
    'info' => t('XS: User Links'),
    'cache' => DRUPAL_CACHE_PER_PAGE,
  );

  return $block;
}

/**
 * Implements hook_block_view().
 */
function xs_block_view($delta = '') {
  $node = xs_is_vm_context();

  if ($delta == 'xs-server-navigation' && !user_is_anonymous()) {
    return array(
      'subject' => '',
      'content' => theme('xs_server_navigation'),
    );
  }

  if ($delta == 'xs-server-thumbs-navigation' && !user_is_anonymous() && !empty($node)) {
    return array(
      'subject' => '',
      'content' => theme('xs_server_thumbs_navigation'),
    );
  }

  if ($delta == 'xs-server-action-links' && !user_is_anonymous() && !empty($node)) {
    module_load_include('inc', 'xs', 'includes/xs.actions');
    if (!empty($node)) {
      $vm = xs_get_vm_by_node($node);
      if (empty($vm)) {
        return array(
          'subject' => '',
          'content' => '',
        );
      }

      $links = xs_actions_get_links($node->nid, $vm['allowed_operations']);

      return array(
        'subject' => '',
        'content' => theme('xs_links_dropdown', array(
            'links' => $links,
            'label' => t('Server Actions'),
            'size' => 'default',
            'classes' => 'hidden-xs',
          )
        ),
      );
    }
  }

  if ($delta == 'xs-user-links' && !user_is_anonymous()) {
    return array(
      'subject' => '',
      'content' => theme('xs_user_navigation'),
    );
  }
}

/**
 * Checks if the URL belongs to VM context.
 *
 * @return object|false
 *   Returns loaded node object of VM or FALSE;
 */
function xs_is_vm_context() {
  if (arg(0) == 'node' && is_numeric(arg(1))) {
    $node = node_load(arg(1));
  }
  if (!empty($node) && $node->type == XS_API_VPS_CONTENT_TYPE) {
    return $node;
  }

  return FALSE;
}

/**
 * Gets XS VM by node.
 *
 * @param object $node
 *   VM node.
 *
 * @return bool|mixed
 */
function xs_get_vm_by_node($node) {
  $vm_uuid = xs_get_vm_uuid_by_node($node);
  try {
    $xs_vm = new XsVm($vm_uuid);
  }
  catch (Exception $e) {
    xs_log($e);
  }

  if (!empty($xs_vm)) {
    $vm = $xs_vm->getData();
  }

  return !empty($vm) ? $vm : FALSE;
}

/**
 * Gets server up/down/unknown status by nid.
 *
 * @param int $nid
 *   Drupal nid.
 *
 * @return array
 */
function xs_get_server_status_html($nid) {
  $vm_uuid = xs_get_vm_uuid_by_node($nid);
  try {
    $xs_vm = new XsVm($vm_uuid);
  }
  catch (Exception $e) {
    xs_log($e);
    $color = 'yellow';
    $title = t('Unable to retrieve status');
  }

  if (!empty($xs_vm)) {
    $vm = $xs_vm->getData();
  }

  if (empty($color) && (empty($vm) || $xs_vm->getStatus() != 'Running')) {
    $color = 'red';
    $title = t('The server is not running');
  }
  elseif (!empty($vm)) {
    $color = 'green';
    $title = t('The server is running');
  }

  return array(
    'color' => $color,
    'title' => $title,
  );
}

/**
 * Creates definition for user navigation links.
 *
 * @param string $destination
 *   Destination definition, same as url().
 *
 * @return array
 */
function xs_actions_get_user_navigation_links($destination = '') {
  global $user;

  // Prepare user link.
  $links['update_profile'] = l(t('Update profile'), 'user/' . $user->uid . '/edit', array('destination' => $destination));
  if (module_exists('password_policy_password_tab')) {
    $links['password'] = l(t('Change Password'), 'user/' . $user->uid . '/password', array(
      'query' => !empty($destination) ? array('destination' => $destination) : array(),
      'attributes' => array('class' => array('xs-glyphicon-link'))
    ));
  }

  if (module_exists('login_notify')) {
    $links['security'] = l(t('Security'), 'user/' . $user->uid . '/browsers', array(
      'query' => !empty($destination) ? array('destination' => $destination) : array(),
      'attributes' => array('class' => array('xs-glyphicon-link'))
    ));
  }

  if (module_exists('tfa_basic') && user_access('setup own tfa')) {
    $links['tfa'] = l(t('2 Factor Auth'), 'user/' . $user->uid . '/security/tfa', array(
      'query' => !empty($destination) ? array('destination' => $destination) : array(),
      'attributes' => array('class' => array('xs-glyphicon-link'))
    ));
  }

  $links['logout'] = l(t('Log out'), 'user/logout', array(
    'query' => !empty($destination) ? array('destination' => $destination) : array(),
    'attributes' => array('class' => array('xs-glyphicon-link'))
  ));

  return $links;
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function xs_form_user_login_alter(&$form, &$form_state, $form_id) {
  if (user_is_anonymous()) {
    drupal_set_title(t('Login'));
  }

  $form['actions']['submit']['#attributes']['class'] = array('btn btn-success');
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function xs_form_user_pass_alter(&$form, &$form_state, $form_id) {
  if (user_is_anonymous()) {
    drupal_set_title(t('Password reset'));
  }

  $form['actions']['submit']['#attributes']['class'] = array('btn btn-success');
}
