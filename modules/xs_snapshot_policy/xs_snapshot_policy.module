<?php
define('XS_SNAPSHOT_MAX_POLICIES_PER_USER', 1);
define('XS_SNAPSHOT_NAME_LABEL', '[auto]:');
define('XS_SNAPSHOT_MIN_FREE_SLOTS_FOR_POLICY', 2);
define('XS_SNAPSHOT_DEFAULT_SELECT_LABEL', '- Select -');
define('XS_SNAPSHOT_DEFAULT_NO_FREE_SLOTS_SELECT_LABEL', '- Too many manual snapshots -');

/**
 * Implements hook_cron().
 */
function xs_snapshot_policy_cron() {
  $policies = entity_load('xs_snapshot_policy');
  $policy_types = entity_load('xs_snapshot_policy_type');

  if (empty($policies) || empty($policy_types)) {
    return;
  }

  module_load_include('inc', 'xs', 'includes/xs.snapshots');

  foreach ($policies as $policy) {
    xs_snapshot_policy_clear_log($policy);
    $policy_type = xs_snapshot_policy_type_load($policy->type_id);
    $interval = $policy_types[$policy->type_id]->time;
    // Check if the current policy could run. Give it 60 seconds grace period.
    if (!variable_get('xs_debug') && !((REQUEST_TIME - $policy->last_run) > ($interval - 60))) {
      // Skip policy.
      continue;
    }

    $vm_node = node_load($policy->target_id);
    $vm_uuid = xs_get_vm_uuid_by_node($vm_node);
    try {
      $xs_vm = new XsVm($vm_uuid);
    }
    catch (Exception $e) {
      xs_log($e);
    }

    // Do not run further checks if the VM is down.
    $vm = $xs_vm->getData();
    if (empty($vm)) {
      continue;
    }

    if (!preg_match('/running/i', $xs_vm->getStatus())) {
      xs_snapshot_policy_log_write($policy->spid, t('Skipping snapshots for !policy_title (!type). The server is not running. Could only take a snapshot of a running server.', array(
        '!policy_title' => $policy->title,
        '!type' => $policy_type->label,
      )),
        'skip');
      // Update last_run flag.
      $policy->last_run = REQUEST_TIME;
      $policy->save();
      continue;
    }

    // Check if the policy maximum snapshots could be satisfied.
    // Load all automated snapshots for the VM.
    $server_snapshots = $xs_vm->getSnapshots(TRUE);
    $automated_snapshots = xs_snapshot_policy_filter_automated_snapshots($server_snapshots);

    // Count the number of snapshots for the VM.
    $automated_snapshots_count = count($automated_snapshots);
    foreach ($automated_snapshots as $automated_snapshot) {
      if ($automated_snapshots_count >= $policy->snapshots) {
        try {
          $xs_snapshot = new XsSnapshot($automated_snapshot->uuid);
          $xs_snapshot->destroy();

          xs_snapshot_policy_log_write($policy->spid, t('Deleted snapshot !name for !policy_title policy (!type)', array(
            '!name' => $automated_snapshot->data['name_label'],
            '!policy_title' => $policy->title,
            '!type' => $policy_type->label,
          )), 'delete');
        }
        catch (Exception $e) {
          watchdog('XS_SNAPSHOT_POLICY', 'Unable to delete snapshot !title', array('!title' => $automated_snapshot->data['name_label']), WATCHDOG_ERROR);
        }
        $automated_snapshots_count--;
      }
    }

    // Now, create one automated snapshot.
    $snapshot_title = format_string('!tag !policy_name (!policy_type): !time', array(
      '!tag' => XS_SNAPSHOT_NAME_LABEL,
      '!policy_name' => $policy->title,
      '!policy_type' => $policy_type->label,
      '!time' => date(XS_DATE_FORMAT, REQUEST_TIME),
    ));

    try {
      $xs_vm->createSnapshot($snapshot_title);

      xs_snapshot_policy_log_write($policy->spid, t('Created new snapshot !title for !policy_title policy (!type)', array(
        '!title' => $snapshot_title,
        '!policy_title' => $policy->title,
        '!type' => $policy_type->label,
      )), 'create');
    }
    catch (Exception $e) {
      xs_snapshot_policy_log_write($policy->spid, t('Snapshot !snap_name failed  (!type)', array(
        '!snap_name' => XS_SNAPSHOT_NAME_LABEL,
        '!policy_title' => $policy->title,
        '!type' => $policy_type->label,
      )), 'fail');

      watchdog('XS_SNAPTHOS_POLICY', 'Failed to create new snapshot !title for !vm_name', array(
        '!title' => $snapshot_title,
        '!vm_name' => $vm_node->title,
      ), WATCHDOG_ERROR);
    }
    // Update last_run flag.
    $policy->last_run = REQUEST_TIME;
    $policy->save();
  }
}

/**
 * Checks if the snapshot is automatically created by a policy.
 *
 * @param array $server_snapshot
 *   Snapshot object from XenApi.
 *
 * @return bool
 *   TRUE if automated snapshot, or FALSE.
 */
function xs_snapshot_policy_is_automated_snapshot($server_snapshot) {
  $label = XS_SNAPSHOT_NAME_LABEL;
  $length = strlen($label);
  if (substr($server_snapshot->data['name_label'], 0, $length) == $label) {
    return TRUE;
  }

  return FALSE;
}

/**
 * Deletes log rows.
 *
 * @param object $policy
 *   Entity.
 */
function xs_snapshot_policy_clear_log($policy) {
  $query = db_select('xs_snapshot_policy_log', 'l');
  $query->fields('l', array('id'));
  $query->condition('policy_id', $policy->spid, '=');
  $query->range($policy->log_limit, 1000000000);
  $query->orderBy('created', 'DESC');
  $result = $query->execute();

  $delete_ids = array();
  while ($row = $result->fetchAssoc()) {
    $delete_ids[] = $row['id'];
  }

  if (!empty($delete_ids)) {
    entity_delete_multiple('xs_snapshot_policy_log', $delete_ids);
    watchdog('XS_SNAPSHOT_POLICY', 'Removing !num excessive rows from xs_snapshot_policy_log', array('!num' => count($delete_ids)), WATCHDOG_INFO);
  }
}

/**
 * Writes log entry.
 *
 * @param int $policy_id
 *  Policy ID.
 * @param string $message
 *   Log message.
 * @param string $type
 *   Type of log entry.
 */
function xs_snapshot_policy_log_write($policy_id, $message, $type = 'cron') {
  $log = entity_create('xs_snapshot_policy_log', array(
    'policy_id' => $policy_id,
    'log' => $message,
    'type' => $type,
    'created' => REQUEST_TIME,
  ));
  $log->save();
}

/**
 * Defines drop-down select element for snapshot policies.
 *
 * @return array
 *   Array for the form select element.
 */
function _xs_get_snapshots_policy_type() {
  $query = db_select('xs_snapshot_policy_type', 't');
  $query->fields('t', array('id', 'label'));
  $result = $query->execute();

  $options = array(0 => '- Select -');
  while ($row = $result->fetchAssoc()) {
    $options[$row['id']] = $row['label'];
  }

  return $options;
}

/**
 * Implements hook_theme().
 */
function xs_snapshot_policy_theme($existing, $type, $theme, $path) {
  return array(
    'xs_snapshot_policy_output' => array(
      'template' => 'templates/xs-snapshot-policy-output',
      'file' => 'theme/xs_snapshot_policy.theme.inc',
      'preprocess functions' => array('xs_snapshot_policy_output_preprocess'),
      'variables' => array(
        'node' => NULL,
      ),
    ),
    'xs_snapshot_policy_log' => array(
      'file' => 'theme/xs_snapshot_policy.theme.inc',
      'function' => 'xs_snapshot_policy_log_theme',
      'variables' => array(
        'node' => NULL,
      ),
    ),
  );
}

/**
 * Identifies if the server has free snapshot slots for policy creation.
 *
 * @param int $nid
 *   Server node nid.
 *
 * @return bool
 *   TRUE if the server has free slots or FALSE.
 */
function xs_snapshot_policy_has_free_slots_left($nid) {
  $snapshots_max = xs_snapshot_policy_get_snapshots_max_for_policy($nid);
  if ($snapshots_max <= XS_SNAPSHOT_MIN_FREE_SLOTS_FOR_POLICY) {
    return FALSE;
  }

  return TRUE;
}

/**
 * Form definition for 'xs_snapshot_policy_form'.
 */
function xs_snapshot_policy_form($form, &$form_state, $nid, $spid = NULL) {
  $form_state['storage']['node_nid'] = $nid;

  $title = t('Create snapshot policy');
  if ($spid) {
    $policy = xs_snapshot_policy_load($spid);
    $title = t('Edit snapshot policy');
  }

  $form['#prefix'] = '<div id="snapshot_policy_form" class="modal fade" role="dialog" aria-labelledby="gridSystemModalLabel"><div class="modal-dialog" role="document"><div class="modal-content">';
  $form['#suffix'] = '</div></div></div>';

  $form['header'] = array(
    '#markup' => '<div class="modal-header">
                  <button type="button" class="close" data-dismiss="modal" aria-label="Close"><span aria-hidden="true">&times;</span></button>
                  <h4 class="modal-title" id="gridSystemModalLabel">' . $title . '</h4>
                </div>',
  );

  // If we do not have free snapshot slots available, return error message.
  if (!$spid && !xs_snapshot_policy_has_free_slots_left($nid)) {
    $count = xs_get_snapshots_limit($nid) - xs_snapshot_policy_get_snapshots_max_for_policy($nid);
    $limit = xs_get_snapshots_limit($nid);
    $form['message'] = array(
      '#markup' => t('Unable to create policy. Your existing snapshots count is !count, approaching server limit of !limit. You need to remove at least !slots snapshots in order to create a policy.', array(
        '!count' => $count,
        '!limit' => $limit,
        '!slots' => $limit - $count + 1,
      )),
      '#prefix' => '<div class="modal-body"><div class="form-group"><span class="text-danger">',
      '#suffix' => '</span></div></div>',
    );

    return $form;
  }

  $form['title'] = array(
    '#type' => 'textfield',
    '#title' => t('Policy name'),
    '#size' => 64,
    '#maxlength' => 64,
    '#default_value' => !empty($policy->title) ? $policy->title : '',
    '#description' => t('Give a name, to this policy'),
    '#required' => TRUE,
    '#prefix' => '<div class="modal-body"><div class="form-group">',
    '#suffix' => '</div></div>',
    '#attributes' => array(
      'classes' => array('form-control'),
    ),
  );

  $form['type_id'] = array(
    '#type' => 'select',
    '#title' => t('Policy type'),
    '#options' => _xs_get_snapshots_policy_type(),
    '#default_value' => !empty($policy->type_id) ? $policy->type_id : '0',
    '#description' => '<small class="text-muted">' . t('Select how often you want snapshots to be created') . '</small>',
    '#required' => TRUE,
    '#prefix' => '<div class="modal-body"><div class="form-group">',
    '#suffix' => '</div></div>',
    '#attributes' => array(
      'classes' => array('form-control'),
    ),
  );

  if ($spid) {
    $form['spid'] = array(
      '#type' => 'hidden',
      '#value' => $spid,
    );
  }

  $snapshots_options = xs_snapshot_policy_get_snapshot_form_element_selection($nid);

  $snapshots_description = '<small class="text-default">' . t('Select the maximum number of snapshots to keep.
      Once this limit is reached, snapshots will be rotated. Refer to the help text
      at the bottom of this page to understand how manually created snapshots and
      snapshots created by this policy are rotated.') . '</small>';

  $form['snapshots'] = array(
    '#type' => 'select',
    '#title' => t('Policy Snapshots limit'),
    '#options' => $snapshots_options,
    '#default_value' => !empty($policy->snapshots) ? $policy->snapshots : '0',
    '#description' => $snapshots_description,
    '#required' => TRUE,
    '#prefix' => '<div class="modal-body"><div class="form-group">',
    '#suffix' => '</div></div>',
    '#attributes' => array(
      'classes' => array('form-control'),
    ),
  );

  $form['log_limit'] = array(
    '#type' => 'select',
    '#title' => t('Log limit'),
    '#options' => array(
      '1000' => t('1,000 rows'),
      '10000' => t('10,000 rows'),
      '100000' => t('100,000 rows'),
    ),
    '#description' => t('How many log entries to keep'),
    '#default_value' => '1000',
    '#required' => TRUE,
    '#prefix' => '<div class="modal-body"><div class="form-group">',
    '#suffix' => '</div></div>',
    '#attributes' => array(
      'classes' => array('form-control'),
    ),
  );

  $form['actions'] = array(
    '#type' => 'container',
    '#attributes' => array(
      'class' => array('modal-footer'),
    ),
  );

  if ($spid) {
    $form['actions']['delete'] = array(
      '#type' => 'submit',
      '#attributes' => array(
        'type' => 'button',
        'class' => array('btn btn-danger'),
      ),
      '#value' => t('Delete'),
    );
  }

  $form['actions']['cancel'] = array(
    '#type' => 'button',
    '#attributes' => array(
      'type' => 'button',
      'class' => array('btn btn-default'),
      'data-dismiss' => 'modal',
    ),
    '#value' => t('Cancel'),
  );

  $form['actions']['submit'] = array(
    '#type' => 'submit',
    '#value' => empty($spid) ? XS_API_SNAPSHOT_CREATE_BUTTON_TITLE : t('Update'),
    '#attributes' => array(
      'type' => 'button',
      'class' => array('btn btn-primary'),
    ),
  );

  return $form;
}

/**
 * Form validate handler.
 */
function xs_snapshot_policy_form_validate($form, &$form_state) {
  $linked_node = node_load($form_state['storage']['node_nid']);
  if (!xs_snapshot_policy_access_callback('create', $linked_node)) {
    return form_set_error(NULL, 'Validation error. You cannot add policy for this server.');
  }

  $vm_uuid = xs_get_vm_uuid_by_node($linked_node);
  try {
    $xs_vm = new XsVm($vm_uuid);
  }
  catch (Exception $e) {
    xs_log($e);
  }

  if (!empty($xs_vm)) {
    $vm = $xs_vm->getData();
  }

  if (empty($vm)) {
    return form_set_error(NULL, '339: Validation error. Unable to create automation policy.');
  }

  $form_state['storage']['linked_node'] = $linked_node;
  if (!xs_actions_access_callback($linked_node)) {
    drupal_set_message('Validation error. Unable to create snapshots automation policy.', 'error');
    return form_set_error(NULL, 'Validation error. Unable to create snapshots automation policy.');
  }

  module_load_include('inc', 'xs', 'includes/xs.snapshots');
  $limit = xs_get_snapshots_limit($linked_node);
  if ($form_state['values']['snapshots'] > $limit) {
    form_set_error('snapshots', 'Validation error. You attempted to select the number of snapshots to keep, which is greater that allowed for your server');
  }

  if ($form_state['values']['type_id'] == '0') {
    form_set_error('snapshots', 'Validation error. Please select the policy type.');
  }

  if ($form_state['values']['snapshots'] == '0') {
    form_set_error('snapshots', 'Validation error. Please select the number of snapshots this policy to maintain.');
  }
}

/**
 * Form submit handler.
 */
function xs_snapshot_policy_form_submit($form, &$form_state) {
  $form_state['values']['uid'] = xs_get_vps_owner_uid($form_state['storage']['linked_node']);
  $form_state['values']['target_id'] = $form_state['storage']['linked_node']->nid;

  if (empty($form_state['values']['spid']) && $form_state['values']['op'] == XS_API_SNAPSHOT_CREATE_BUTTON_TITLE) {
    // New policy. Create.
    $policy = entity_create('xs_snapshot_policy', $form_state['values']);
    $policy->save();

    drupal_set_message(t('Successfully added new snapshots policy !title', array('!title' => $policy->title)), 'status');
  }
  elseif (!empty($form_state['values']['spid']) && $form_state['values']['op'] == t('Delete')) {
    // Delete existing policy.
    $policies = entity_load('xs_snapshot_policy', array($form_state['values']['spid']));
    $policy = reset($policies);
    xs_snapshot_policy_delete($policy);

    drupal_set_message(t('Successfully deleted snapshots policy !title', array('!title' => $policy->title)), 'status');
  }
  elseif (!empty($form_state['values']['spid']) && $form_state['values']['op'] == t('Update')) {
    // Update existing policy.
    $policy = xs_snapshot_policy_load($form_state['values']['spid']);
    $policy->title = $form_state['values']['title'];
    $policy->snapshots = $form_state['values']['snapshots'];
    $policy->type_id = $form_state['values']['type_id'];
    $policy->log_limit = $form_state['values']['log_limit'];
    // Save and go back.
    $policy->save();

    drupal_set_message(t('Successfully updated snapshots policy !title', array('!title' => $policy->title)), 'status');
  }
  else {
    drupal_set_message(t('Unable to complete operation due to an error. Please contact our support.'), 'error');
  }
}

/**
 * Prepares options for the drop-down select of maximum snapshots.
 *
 * @param int $nid
 *   Server node id.
 *
 * @return array
 *   Array of options as required for the form select element.
 */
function xs_snapshot_policy_get_snapshot_form_element_selection($nid) {
  $max = xs_snapshot_policy_get_snapshots_max_for_policy($nid);

  $options = array(0 => XS_SNAPSHOT_DEFAULT_SELECT_LABEL);

  $i = 1;
  while ($i <= $max) {
    $options[$i] = format_plural($i, '@count Snapshot', '@count Snapshots', array('@count' => $i));
    $i++;
  }

  return $options;
}

/**
 * Assesses the maximum number of free snapshot slots available.
 *
 * Every server has it's own unique maximum number of snapshots that could be
 * created. When a policy is created, we not allow to exceed this limit by the
 * total of existing snapshots and policy max. For example, a server may have
 * limit of 20 snapshots, but have 15 existing snapshots. In which case this
 * function return 5.
 *
 * @param int $nid
 *   Server node nid.
 *
 * @return bool|int
 */
function xs_snapshot_policy_get_snapshots_max_for_policy($nid) {
  module_load_include('inc', 'xs', 'includes/xs.snapshots');

  $node = node_load($nid);
  $limit = xs_get_snapshots_limit($node);

  // Make snapshots limit for policy as half of the total snapshots for the
  // server.
  $vm_uuid = xs_get_vm_uuid_by_node($node);
  try {
    $xs_vm = new XsVm($vm_uuid);
  }
  catch (Exception $e) {
    xs_log($e);
  }

  if (empty($xs_vm)) {
    return;
  }
  $server_snapshots = $xs_vm->getSnapshots();

  $snapshots_count = 0;
  if (!empty($server_snapshots)) {
    foreach ($server_snapshots as $server_snapshot) {
      // Only count snapshots not created by a policy.
      if (!xs_snapshot_policy_is_automated_snapshot($server_snapshot)) {
        $snapshots_count++;
      }
    }
  }

  return $limit - $snapshots_count;
}

/**
 * Filters automated snapshots from the array of all snapshots for the server.
 *
 * @param array $snapshots
 *   Array of snapshot objects from XenApi.
 * @param bool|TRUE $reorder
 *   Reorder snapshots by creation time, ASCENDING.
 *
 * @return array
 *   Array of snapshots, created by an automated policy.
 */
function xs_snapshot_policy_filter_automated_snapshots($snapshots, $reorder = TRUE) {
  $auto_snapshots = array();
  foreach ($snapshots as $snapshot) {
    // Only count snapshots not created by a policy.
    if (xs_snapshot_policy_is_automated_snapshot($snapshot)) {
      $auto_snapshots[] = $snapshot;
    }
  }

  return $auto_snapshots;
}

/**
 * Loads all Policies owned by a user.
 *
 * @param int $uid
 *   Drupal user uid.
 * @param int $nid
 *   Parent VM Node nid.
 *
 * @return array|\SnapshotPolicy
 *   Single snapshot policy or Array of entity objects.
 */
function xs_snapshot_policy_get_policies_per_user($uid, $nid) {
  if (XS_SNAPSHOT_MAX_POLICIES_PER_USER == 1) {
    return xs_snapshot_policy_load(NULL, array(
      'uid' => $uid,
      'target_id' => $nid
    ));
  }
  else {
    return xs_snapshot_policy_load_multiple(FALSE, array(
      'uid' => $uid,
      'target_id' => $nid
    ));
  }
}

/**
 * Calculates the number of policies owned by a user.
 *
 * @param int $uid
 *   Drupal user uid.
 * @param int $nid
 *   Parent VM Node nid.
 *
 * @return int
 *   Number of policies for the user and parent server.
 */
function xs_snapshot_policy_get_policies_count_per_user($uid, $nid) {
  $policies = xs_snapshot_policy_get_policies_per_user($uid, $nid);

  return count($policies);
}

/**
 * Implements hook_entity_info().
 */
function xs_snapshot_policy_entity_info() {
  $return['xs_snapshot_policy'] = array(
    'label' => t('Snapshot Policy'),
    'entity class' => 'SnapshotPolicy',
    'controller class' => 'SnapshotPolicyController',
    'base table' => 'xs_snapshot_policy',
    'fieldable' => TRUE,
    'entity keys' => array(
      'id' => 'spid',
      'bundle' => 'type_id',
    ),
    'bundle keys' => array(
      'bundle' => 'id',
    ),
    'bundles' => array(),
    'load hook' => 'xs_snapshot_policy_load',
    'view modes' => array(
      'full' => array(
        'label' => t('Default'),
        'custom settings' => FALSE,
      ),
    ),
    'label callback' => 'entity_class_label',
    'uri callback' => 'entity_class_uri',
    'module' => 'xs_snapshot_policy',
    'access callback' => 'xs_snapshot_policy_access',
  );

  $return['xs_snapshot_policy_type'] = array(
    'label' => t('Snapshot Policy Type'),
    'entity class' => 'SnapshotPolicyType',
    'controller class' => 'SnapshotPolicyTypeController',
    'base table' => 'xs_snapshot_policy_type',
    'fieldable' => FALSE,
    'bundle of' => 'xs_snapshot_policy',
    'exportable' => TRUE,
    'entity keys' => array(
      'id' => 'id',
      'name' => 'type',
      'label' => 'label',
    ),
    'module' => 'xs_snapshot_policy',
    // Enable the entity API's admin UI.
    'admin ui' => array(
      'path' => 'admin/xs/snapshot-policy-types',
      'file' => 'xs_snapshot_policy.admin.inc',
      'controller class' => 'SnapshotPolicyTypeUIController',
    ),
    'access callback' => 'xs_snapshot_policy_type_access',
  );

  $return['xs_snapshot_policy_log'] = array(
    'label' => t('Snapshot Policy Log'),
    'entity class' => 'SnapshotPolicyLog',
    'controller class' => 'SnapshotPolicyLogController',
    'base table' => 'xs_snapshot_policy_log',
    'fieldable' => FALSE,
    'bundle of' => 'xs_snapshot_policy',
    'exportable' => FALSE,
    'entity keys' => array(
      'id' => 'id',
    ),
    'module' => 'xs_snapshot_policy',
  );

  return $return;
}

/**
 * Implements hook_entity_info_alter().
 */
function xs_snapshot_policy_entity_info_alter(&$entity_info) {
  foreach (xs_snapshot_policy_types() as $type => $info) {
    $entity_info['xs_snapshot_policy']['bundles'][$type] = array(
      'label' => $info->label,
      'admin' => array(
        'path' => 'admin/xs/snapshot-policy-types/manage/%xs_snapshot_policy_type',
        'real path' => 'admin/xs/snapshot-policy-types/manage/' . $type,
        'bundle argument' => 4,
      ),
    );
  }
}

/**
 * Implements hook_menu().
 */
function xs_snapshot_policy_menu() {
  $items = array();

  $items['admin/xs/snapshot-policy-types/%xs_snapshot_policy_type/delete'] = array(
    'title' => 'Delete',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('xs_snapshot_policy_type_form_delete_confirm', 4),
    'access arguments' => array('administer xs_snapshot_policy types'),
    'weight' => 1,
    'type' => MENU_NORMAL_ITEM,
    'file' => 'xs_snapshot_policy.admin.inc',
  );

  $items['node/%node/xs-snapshot-policy'] = array(
    'title' => 'Snaphot Policy',
    'description' => 'Manage server automated snapshot policy',
    'page callback' => 'xs_snapshot_policy_display_callback',
    'page arguments' => array(1),
    'access callback' => 'xs_snapshot_policy_access_callback',
    'access arguments' => array('view', 1),
    'weight' => 65,
    'type' => MENU_LOCAL_TASK,
  );

  return $items;
}

function xs_snapshot_policy_display_callback($node) {
  return theme('xs_snapshot_policy_output', array('node' => $node));
}

/**
 * Implements hook_permission().
 */
function xs_snapshot_policy_permission() {
  $permissions = array(
    'administer xs_snapshot_policy types' => array(
      'title' => t('Administer snapshot-policy types'),
      'description' => t('Allows users to configure snapshot-policy types and their fields.'),
      'restrict access' => TRUE,
    ),
    'administer xs_snapshot_policy entities' => array(
      'title' => t('Administer Snapshot Policy Entities'),
      'description' => t('Allows users to manage snapshot-policy entities and their fields.'),
      'restrict access' => TRUE,
    ),
    'create xs_snapshot_policy entities' => array(
      'title' => t('Create XenServer Snapshot Policies'),
      'description' => t('Allows users to create XenServer Snapshot Policies.'),
      'restrict access' => TRUE,
    ),
    'view own xs_snapshot_policy entities' => array(
      'title' => t('View own XenServer Snapshot Policies'),
      'description' => t('Allows users to view XenServer Snapshot Policies they created.'),
      'restrict access' => TRUE,
    ),
    'edit any xs_snapshot_policy entities' => array(
      'title' => t('Edit any XenServer Snapshot Policies'),
      'description' => t('Allows users to edit any XenServer Snapshot Policies.'),
      'restrict access' => TRUE,
    ),
    'edit own xs_snapshot_policy entities' => array(
      'title' => t('Edit own XenServer Snapshot Policies'),
      'description' => t('Allows users to edit own XenServer Snapshot Policies.'),
      'restrict access' => TRUE,
    ),
    'view xs_snapshot_policy log' => array(
      'title' => t('View log entries for Snapshot Policies log'),
      'description' => t('Allows users to View log entries for Snapshot Policies log.'),
      'restrict access' => TRUE,
    ),
  );

  return $permissions;
}

/**
 * Implements hook_entity_property_info_alter().
 */
function xs_snapshot_policy_entity_property_info_alter(&$info) {
  $properties = &$info['xs_snapshot_policy']['properties'];
  $properties['created'] = array(
    'label' => t("Date created"),
    'type' => 'date',
    'description' => t("The date the node was posted."),
    'setter callback' => 'entity_property_verbatim_set',
    'setter permission' => 'administer nodes',
    'schema field' => 'created',
  );
  $properties['changed'] = array(
    'label' => t("Date changed"),
    'type' => 'date',
    'schema field' => 'changed',
    'description' => t("The date the node was most recently updated."),
  );
  $properties['uid'] = array(
    'label' => t("Author"),
    'type' => 'user',
    'description' => t("The author of the snapshot-policy."),
    'setter callback' => 'entity_property_verbatim_set',
    'setter permission' => 'administer xs_snapshot_policy entities',
    'required' => TRUE,
    'schema field' => 'uid',
  );
}

/**
 * Access callback for snapshot policies page.
 *
 * @param string $op
 *   Type of access string, e.g. 'view'.
 * @param object $node
 *   Node object of the server.
 *
 * @return bool
 *   TRUE for access or FALSE for no access.
 */
function xs_snapshot_policy_access_callback($op, $node) {
  global $user;

  if (empty($node) || $node->type != XS_API_VPS_CONTENT_TYPE) {
    return FALSE;
  }

  switch ($op) {
    case 'view':
      return user_access('administer xs_snapshot_policy entities', $user)
      || (user_access('view own xs_snapshot_policy entities', $user) && (xs_get_vps_owner_uid($node) === $user->uid));
      break;

    case 'create':
      return user_access('administer xs_snapshot_policy entities', $user)
      || (user_access('create xs_snapshot_policy entities', $user) && (xs_get_vps_owner_uid($node) === $user->uid));
      break;
  }
}

/**
 * Access callback for snapshot-policy.
 */
function xs_snapshot_policy_access($op, $snapshot_policy, $account = NULL, $entity_type = NULL) {
  global $user;

  if (!isset($account)) {
    $account = $user;
  }
  switch ($op) {
    case 'create':
      return user_access('administer xs_snapshot_policy entities', $account)
      || user_access('create xs_snapshot_policy entities', $account);

    case 'view':
      return user_access('administer xs_snapshot_policy entities', $account)
      || (user_access('view own xs_snapshot_policy entities', $account) && ($snapshot_policy->uid == $account->uid));

    case 'edit':
      return user_access('administer xs_snapshot_policy entities')
      || user_access('edit any xs_snapshot_policy entities')
      || (user_access('edit own xs_snapshot_policy entities') && ($snapshot_policy->uid == $account->uid));
  }
}

/**
 * Load a snapshot-policy.
 *
 * @param int $spid
 *   Policy ID.
 * @param array $conditions
 *   An array of conditions to send to the query. Good example would be to
 *   filter policies by user and/or node id by setting $conditions to
 *   array('uid' => $uid, 'target_id' => $nid).
 * @param bool $reset
 *   TRUE to reset entity cache.
 *
 * @return SnapshotPolicy
 *   Entity object.
 *
 */
function xs_snapshot_policy_load($spid = NULL, $conditions = array(), $reset = FALSE) {
  $spids = !empty($spid) ? array($spid) : FALSE;
  $policies = xs_snapshot_policy_load_multiple($spids, $conditions, $reset);

  return reset($policies);
}

/**
 * Load multiple XenServer Snapshot Policies based on certain conditions.
 *
 * @param array|bool $spids
 *   Array of Policy IDs. If omitted, all entities will be retrieved.
 * @param array $conditions
 *   An array of conditions to send to the query. Good example would be to
 *   filter policies by user and/or node id by setting $conditions to
 *   array('uid' => $uid, 'target_id' => $nid).
 * @param bool $reset
 *   TRUE to reset entity cache.
 *
 * @return SnapshotPolicy
 *   Entity object.
 */
function xs_snapshot_policy_load_multiple($spids = FALSE, $conditions = array(), $reset = FALSE) {
  return entity_load('xs_snapshot_policy', $spids, $conditions, $reset);
}

/**
 * Save snapshot-policy.
 */
function xs_snapshot_policy_save($snapshot_policy) {
  entity_save('xs_snapshot_policy', $snapshot_policy);
}

/**
 * Delete single snapshot-policy.
 */
function xs_snapshot_policy_delete($snapshot_policy) {
  $entity_id = entity_id('xs_snapshot_policy', $snapshot_policy);
  entity_delete('xs_snapshot_policy', $entity_id);
}

/**
 * Delete multiple XenServer Snapshot Policies.
 */
function xs_snapshot_policy_delete_multiple($snapshot_policy_ids) {
  entity_delete_multiple('xs_snapshot_policy', $snapshot_policy_ids);
}

/**
 * Access callback for snapshot-policy Type.
 */
function xs_snapshot_policy_type_access($op, $entity = NULL) {
  return user_access('administer xs_snapshot_policy types');
}

/**
 * Access callback for snapshot-policy Type.
 */
function xs_snapshot_policy_log_access($op, $entity = NULL) {
  return user_access('view xs_snapshot_policy log');
}

/**
 * Load snapshot-policy Type.
 *
 * @param int $type_id
 *   Policy type id.
 *
 * @return \SnapshotPolicyType
 *   Policy Type entity object.
 */
function xs_snapshot_policy_type_load($type_id) {
  return xs_snapshot_policy_types($type_id);
}

/**
 * List of snapshot-policy Types.
 *
 * @todo: In use.
 */
function xs_snapshot_policy_types($type_id = NULL) {
  $type_ids = !empty($type_id) ? array($type_id) : FALSE;
  $types = entity_load('xs_snapshot_policy_type', $type_ids);

  return isset($type_id) ? reset($types) : $types;
}

/**
 * Save snapshot-policy type entity.
 */
function xs_snapshot_policy_type_save($snapshot_policy_type) {
  entity_save('xs_snapshot_policy_type', $snapshot_policy_type);
}

/**
 * Delete single case type.
 */
function xs_snapshot_policy_type_delete($snapshot_policy_type) {
  entity_delete('xs_snapshot_policy_type', entity_id('xs_snapshot_policy_type', $snapshot_policy_type));
}

/**
 * Delete multiple case types.
 */
function xs_snapshot_policy_type_delete_multiple($task_type_ids) {
  entity_delete_multiple('xs_snapshot_policy_type', $task_type_ids);
}

/**
 * Implements hook_views_api().
 */
function xs_snapshot_policy_views_api() {
  return array(
    'api' => 3,
    'path' => drupal_get_path('module', 'xs_snapshot_policy'),
  );
}

/**
 * Gets log entries for a policy
 *
 * @param \SnapshotPolicy $policy
 *   Policy entity.
 * @param int $limit
 *   Limits the query range.
 *
 * @return array
 *   Array of loaded entities.
 */
function xs_snapshot_policy_get_log_for_policy(SnapshotPolicy $policy, $limit = 25) {
  $query = new EntityFieldQuery();
  $query->entityCondition('entity_type', 'xs_snapshot_policy_log')
    ->propertyCondition('policy_id', $policy->spid, '=')
    ->propertyOrderBy('created', 'DESC')
    ->range(0, $limit);

  $result = $query->execute();

  if (empty($result['xs_snapshot_policy_log'])) {
    return array();
  }

  $rows = array();
  foreach ($result['xs_snapshot_policy_log'] as $log) {
    $rows[] = entity_load('xs_snapshot_policy_log', array($log->id));
  }

  return $rows;
}
