<?php
define('XS_SNAPSHOT_MAX_POLICIES_PER_USER', 1);
/**
 * Defines drop-down select element for snapshot policies.
 *
 * @return array
 *   Array for the form select element.
 */
function _xs_get_snapshots_policy_type() {
  return array(
    XS_SNAPSHOTS_POLICY_LABEL_KEY_ONE_HOURLY => XS_SNAPSHOTS_POLICY_LABEL_LABEL_ONE_HOURLY,
    XS_SNAPSHOTS_POLICY_LABEL_KEY_TWO_HOURLY => XS_SNAPSHOTS_POLICY_LABEL_LABEL_TWO_HOURLY,
    XS_SNAPSHOTS_POLICY_LABEL_KEY_FOUR_HOURLY => XS_SNAPSHOTS_POLICY_LABEL_LABEL_FOUR_HOURLY,
    XS_SNAPSHOTS_POLICY_LABEL_KEY_SIX_HOURLY => XS_SNAPSHOTS_POLICY_LABEL_LABEL_SIX_HOURLY,
    XS_SNAPSHOTS_POLICY_LABEL_KEY_EIGHT_HOURLY => XS_SNAPSHOTS_POLICY_LABEL_LABEL_EIGHT_HOURLY,
    XS_SNAPSHOTS_POLICY_LABEL_KEY_TWELVE_HOURLY => XS_SNAPSHOTS_POLICY_LABEL_LABEL_TWELVE_HOURLY,
    XS_SNAPSHOTS_POLICY_LABEL_KEY_ONE_DAILY => XS_SNAPSHOTS_POLICY_LABEL_LABEL_ONE_DAILY,
    XS_SNAPSHOTS_POLICY_LABEL_KEY_TWO_DAILY => XS_SNAPSHOTS_POLICY_LABEL_LABEL_TWO_DAILY,
    XS_SNAPSHOTS_POLICY_LABEL_KEY_ONE_WEEKLY => XS_SNAPSHOTS_POLICY_LABEL_LABEL_ONE_WEEKLY,
  );
}

/**
 * Form definition for 'xs_snapshot_policy_create_form'.
 */
function xs_snapshot_policy_create_form($form, &$form_state, $nid) {
  $form_state['storage']['node_nid'] = $nid;

  $form['#prefix'] = '<div id="new_snapshot_policy_form" class="modal fade" role="dialog" aria-labelledby="gridSystemModalLabel"><div class="modal-dialog" role="document"><div class="modal-content">';
  $form['#suffix'] = '</div></div></div>';

  $form['header'] = array(
    '#markup' => '<div class="modal-header">
                  <button type="button" class="close" data-dismiss="modal" aria-label="Close"><span aria-hidden="true">&times;</span></button>
                  <h4 class="modal-title" id="gridSystemModalLabel">Create new automated snapshots policy</h4>
                </div>',
  );

  $form['is_new'] = array(
    '#type' => 'hidden',
    '#value' => 1,
  );

  $form['name'] = array(
    '#type' => 'textfield',
    '#title' => t('Policy name'),
    '#size' => 64,
    '#maxlength' => 64,
    '#description' => t('Give a name, to this policy'),
    '#required' => TRUE,
    '#prefix' => '<div class="modal-body"><div class="row"><div class="col-md-12">',
    '#suffix' => '</div></div></div>',
  );

  $form['type'] = array(
    '#type' => 'select',
    '#title' => t('Select snapshots type'),
    '#options' => _xs_get_snapshots_policy_type(),
    '#description' => t('Select how often you want snapshots to be created'),
    '#required' => TRUE,
  );

  $form['status'] = array(
    '#type' => 'checkbox',
    '#title' => t('Active'),
    '#description' => t('Select to activate this policy'),
    '#default_value' => 1,
  );

  $form['actions'] = array(
    '#type' => 'container',
    '#attributes' => array(
      'class' => array('modal-footer'),
    ),
  );

  $form['actions']['cancel'] = array(
    '#type' => 'button',
    '#attributes' => array(
      'type' => 'button',
      'class' => array('btn btn-default'),
      'data-dismiss' => 'modal',
    ),
    '#value' => t('Cancel'),
  );

  $form['actions']['submit'] = array(
    '#type' => 'submit',
    '#value' => XS_API_SNAPSHOT_CREATE_BUTTON_TITLE,
    '#attributes' => array(
      'type' => 'button',
      'class' => array('btn btn-primary'),
    ),
  );

  return $form;
}

function xs_snapshot_policy_create_form_validate($form, &$form_state) {
  $linked_node = node_load($form_state['storage']['node_nid']);
  $form_state['storage']['linked_node'] = $linked_node;
  if (!xs_actions_access_callback($linked_node)) {
    drupal_set_message('Validation error. Unable to create snapshots automation policy.', 'error');
    return form_set_error(NULL, 'Validation error. Unable to create snapshots automation policy.');
  }
}

function xs_snapshot_policy_create_form_submit($form, &$form_state) {
  try {
    $node_wrapper = entity_metadata_wrapper('node', $form_state['storage']['linked_node']);
  }
  catch (Exception $e) {
    watchdog('XS_SNAP_POLICY', $e->getMessage(), WATCHDOG_ERROR);
  }

  $policy = new XsSnapshotPolicy($node_wrapper->field_xs_vps_owner->value());
  $policy->target_id = $form_state['storage']['node_nid'];
  $policy->name = $form_state['values']['name'];
  $policy->type_id = $form_state['values']['type'];
  $policy->status = $form_state['values']['status'];

  $policy->save();
}

/**
 * Implements hook_entity_info().
 */
function xs_snapshot_policy_entity_info() {
  $return = array(
    'xs_snapshot_policy' => array(
      'label' => t('Snapshot Policy'),
      'entity class' => 'SnapshotPolicy',
      'controller class' => 'SnapshotPolicyController',
      'base table' => 'xs_snapshot_policy',
      'fieldable' => TRUE,
      'entity keys' => array(
        'id' => 'spid',
        'bundle' => 'type',
      ),
      'bundle keys' => array(
        'bundle' => 'type',
      ),
      'bundles' => array(),
      'load hook' => 'xs_snapshot_policy_load',
      'view modes' => array(
        'full' => array(
          'label' => t('Default'),
          'custom settings' => FALSE,
        ),
      ),
      'label callback' => 'entity_class_label',
      'uri callback' => 'entity_class_uri',
      'module' => 'xs_snapshot_policy',
      'access callback' => 'xs_snapshot_policy_access',
    ),
  );
  $return['xs_snapshot_policy_type'] = array(
    'label' => t('Snapshot Policy Type'),
    'entity class' => 'SnapshotPolicyType',
    'controller class' => 'SnapshotPolicyTypeController',
    'base table' => 'xs_snapshot_policy_type',
    'fieldable' => FALSE,
    'bundle of' => 'xs_snapshot_policy',
    'exportable' => TRUE,
    'entity keys' => array(
      'id' => 'id',
      'name' => 'type',
      'label' => 'label',
    ),
    'module' => 'xs_snapshot_policy',
    // Enable the entity API's admin UI.
    'admin ui' => array(
      'path' => 'admin/structure/xs/snapshot-policy-types',
      'file' => 'xs_snapshot_policy.admin.inc',
      'controller class' => 'ExampleTaskTypeUIController',
    ),
    'access callback' => 'xs_snapshot_policy_type_access',
  );

  return $return;
}

/**
 * Implements hook_entity_info_alter().
 */
function xs_snapshot_policy_entity_info_alter(&$entity_info) {
  foreach (xs_snapshot_policy_types() as $type => $info) {
    $entity_info['xs_snapshot_policy']['bundles'][$type] = array(
      'label' => $info->label,
      'admin' => array(
        'path' => 'admin/structure/xs/snapshot-policy-types/manage/%xs_snapshot_policy_type',
        'real path' => 'admin/structure/xs/snapshot-policy-types/manage/' . $type,
        'bundle argument' => 4,
      ),
    );
  }
}

/**
 * Implements hook_menu().
 */
function xs_snapshot_policy_menu() {
  $items = array();

  $items['snapshot-policy/add'] = array(
    'title' => 'Add snapshot-policy',
    'page callback' => 'xs_snapshot_policy_admin_add_page',
    'access arguments' => array('administer xs_snapshot_policy entities'),
    'file' => 'xs_snapshot_policy.admin.inc',
    'type' => MENU_LOCAL_ACTION,
    'tab_parent' => 'snapshot-policy',
    'tab_root' => 'snapshot-policy',
  );

  $snapshot_policy_uri = 'snapshot-policy/%xs_snapshot_policy';
  $snapshot_policy_uri_argument_position = 1;

  $items[$snapshot_policy_uri] = array(
    'title callback' => 'entity_label',
    'title arguments' => array('xs_snapshot_policy', $snapshot_policy_uri_argument_position),
    'page callback' => 'xs_snapshot_policy_view',
    'page arguments' => array($snapshot_policy_uri_argument_position),
    'access callback' => 'entity_access',
    'access arguments' => array('view', 'xs_snapshot_policy', $snapshot_policy_uri_argument_position),
    'file' => 'xs_snapshot_policy.pages.inc',
  );

  $items[$snapshot_policy_uri . '/view'] = array(
    'title' => 'View',
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'weight' => -10,
  );

  $items[$snapshot_policy_uri . '/delete'] = array(
    'title' => 'Delete snapshot-policy',
    'title callback' => 'xs_snapshot_policy_label',
    'title arguments' => array($snapshot_policy_uri_argument_position),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('xs_snapshot_policy_delete_form', $snapshot_policy_uri_argument_position),
    'access callback' => 'entity_access',
    'access arguments' => array('edit', 'xs_snapshot_policy', $snapshot_policy_uri_argument_position),
    'file' => 'xs_snapshot_policy.admin.inc',
  );

  $items[$snapshot_policy_uri . '/edit'] = array(
    'title' => 'Edit',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('xs_snapshot_policy_form', $snapshot_policy_uri_argument_position),
    'access callback' => 'entity_access',
    'access arguments' => array('edit', 'xs_snapshot_policy', $snapshot_policy_uri_argument_position),
    'file' => 'xs_snapshot_policy.admin.inc',
    'type' => MENU_LOCAL_TASK,
    'context' => MENU_CONTEXT_PAGE | MENU_CONTEXT_INLINE,
  );

  foreach (xs_snapshot_policy_types() as $type => $info) {
    $items['snapshot-policy/add/' . $type] = array(
      'title' => 'Add snapshot-policy',
      'page callback' => 'xs_snapshot_policy_add',
      'page arguments' => array(2),
      'access callback' => 'entity_access',
      'access arguments' => array('create', 'xs_snapshot_policy', $type),
      'file' => 'xs_snapshot_policy.admin.inc',
    );
  }

  $items['admin/structure/xs/snapshot-policy-types/%xs_snapshot_policy_type/delete'] = array(
    'title' => 'Delete',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('xs_snapshot_policy_type_form_delete_confirm', 4),
    'access arguments' => array('administer xs_snapshot_policy types'),
    'weight' => 1,
    'type' => MENU_NORMAL_ITEM,
    'file' => 'xs_snapshot_policy.admin.inc',
  );

  return $items;
}

/**
 * Implements hook_permission().
 */
function xs_snapshot_policy_permission() {
  $permissions = array(
    'administer xs_snapshot_policy types' => array(
      'title' => t('Administer snapshot-policy types'),
      'description' => t('Allows users to configure snapshot-policy types and their fields.'),
      'restrict access' => TRUE,
    ),
    'create xs_snapshot_policy entities' => array(
      'title' => t('Create XenServer Snapshot Policies'),
      'description' => t('Allows users to create XenServer Snapshot Policies.'),
      'restrict access' => TRUE,
    ),
    'view xs_snapshot_policy entities' => array(
      'title' => t('View XenServer Snapshot Policies'),
      'description' => t('Allows users to view XenServer Snapshot Policies.'),
      'restrict access' => TRUE,
    ),
    'edit any xs_snapshot_policy entities' => array(
      'title' => t('Edit any XenServer Snapshot Policies'),
      'description' => t('Allows users to edit any XenServer Snapshot Policies.'),
      'restrict access' => TRUE,
    ),
    'edit own xs_snapshot_policy entities' => array(
      'title' => t('Edit own XenServer Snapshot Policies'),
      'description' => t('Allows users to edit own XenServer Snapshot Policies.'),
      'restrict access' => TRUE,
    ),
  );

  return $permissions;
}


/**
 * Implements hook_entity_property_info_alter().
 */
function xs_snapshot_policy_entity_property_info_alter(&$info) {
  $properties = &$info['xs_snapshot_policy']['properties'];
  $properties['created'] = array(
    'label' => t("Date created"),
    'type' => 'date',
    'description' => t("The date the node was posted."),
    'setter callback' => 'entity_property_verbatim_set',
    'setter permission' => 'administer nodes',
    'schema field' => 'created',
  );
  $properties['changed'] = array(
    'label' => t("Date changed"),
    'type' => 'date',
    'schema field' => 'changed',
    'description' => t("The date the node was most recently updated."),
  );
  $properties['uid'] = array(
    'label' => t("Author"),
    'type' => 'user',
    'description' => t("The author of the snapshot-policy."),
    'setter callback' => 'entity_property_verbatim_set',
    'setter permission' => 'administer xs_snapshot_policy entities',
    'required' => TRUE,
    'schema field' => 'uid',
  );
}

/**
 * Access callback for snapshot-policy.
 */
function xs_snapshot_policy_access($op, $task, $account = NULL, $entity_type = NULL) {
  global $user;

  if (!isset($account)) {
    $account = $user;
  }
  switch ($op) {
    case 'create':
      return user_access('administer xs_snapshot_policy entities', $account)
          || user_access('create xs_snapshot_policy entities', $account);
    case 'view':
      return user_access('administer xs_snapshot_policy entities', $account)
          || user_access('view xs_snapshot_policy entities', $account);
    case 'edit':
      return user_access('administer xs_snapshot_policy entities')
          || user_access('edit any xs_snapshot_policy entities')
          || (user_access('edit own xs_snapshot_policy entities') && ($task->uid == $account->uid));
  }
}

/**
 * Load a snapshot-policy.
 */
function xs_snapshot_policy_load($tkid, $reset = FALSE) {
  $tasks = xs_snapshot_policy_load_multiple(array($tkid), array(), $reset);
  return reset($tasks);
}

/**
 * Load multiple XenServer Snapshot Policies based on certain conditions.
 */
function xs_snapshot_policy_load_multiple($tkids = array(), $conditions = array(), $reset = FALSE) {
  return entity_load('xs_snapshot_policy', $tkids, $conditions, $reset);
}

/**
 * Save snapshot-policy.
 */
function xs_snapshot_policy_save($task) {
  entity_save('xs_snapshot_policy', $task);
}

/**
 * Delete single snapshot-policy.
 */
function xs_snapshot_policy_delete($task) {
  entity_delete('xs_snapshot_policy', entity_id('xs_snapshot_policy' ,$task));
}

/**
 * Delete multiple XenServer Snapshot Policies.
 */
function xs_snapshot_policy_delete_multiple($task_ids) {
  entity_delete_multiple('xs_snapshot_policy', $task_ids);
}

/**
 * Access callback for snapshot-policy Type.
 */
function xs_snapshot_policy_type_access($op, $entity = NULL) {
  return user_access('administer xs_snapshot_policy types');
}

/**
 * Load snapshot-policy Type.
 */
function xs_snapshot_policy_type_load($task_type) {
  return xs_snapshot_policy_types($task_type);
}

/**
 * List of snapshot-policy Types.
 */
function xs_snapshot_policy_types($type_name = NULL) {
  $types = entity_load_multiple_by_name('xs_snapshot_policy_type', isset($type_name) ? array($type_name) : FALSE);
  return isset($type_name) ? reset($types) : $types;
}

/**
 * Save snapshot-policy type entity.
 */
function xs_snapshot_policy_type_save($task_type) {
  entity_save('xs_snapshot_policy_type', $task_type);
}

/**
 * Delete single case type.
 */
function xs_snapshot_policy_type_delete($task_type) {
  entity_delete('xs_snapshot_policy_type', entity_id('xs_snapshot_policy_type' ,$task_type));
}

/**
 * Delete multiple case types.
 */
function xs_snapshot_policy_type_delete_multiple($task_type_ids) {
  entity_delete_multiple('xs_snapshot_policy_type', $task_type_ids);
}

/**
  * Implements hook_views_api().
  */
function xs_snapshot_policy_views_api() {
  return array(
    'api' => 3,
    'path' => drupal_get_path('module', 'xs_snapshot_policy'),
  );
}

